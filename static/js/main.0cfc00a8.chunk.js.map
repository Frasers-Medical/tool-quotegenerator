{"version":3,"sources":["history.js","Components/Header/Header.js","Components/Footer/Footer.js","Components/ToggleButton/ToggleButton.js","Components/List/List.js","Pages/LandingPage/Components/GenerationSelection/GenerationSelection.js","Services/apiClient.js","Services/quotesService.js","Redux/actions.js","Redux/selectors.js","Components/PillList/PillList.js","Components/SearchBar/SearchBar.js","Components/Modal/Modal.js","Pages/LandingPage/Components/SelectTheme/SelectTheme.js","Pages/LandingPage/Components/SelectGamsatTheme/SelectGamsatTheme.js","Pages/LandingPage/LandingPage.js","Components/HiddenButton/HiddenButton.js","Components/Timer/Timer.js","Components/ChipList/ChipList.js","Pages/QuotePage/Components/Utilities/Utilities.js","Pages/QuotePage/Components/GamsatTitleAndDisclaimer/GamsatTitleAndDisclaimer.js","Pages/QuotePage/QuotePage.js","Pages/App/App.js","serviceWorker.js","Redux/Reducers/isLoading.js","Redux/Reducers/quotes.js","Redux/Reducers/index.js","Redux/store.js","index.js"],"names":["createBrowserHistory","Header","history","useHistory","location","useLocation","useEffect","listen","action","window","scrollTo","className","pathname","onClick","goBack","Footer","ToggleButton","label","toggleState","setToggleState","defaultProps","List","data","onItemClick","React","useState","clickedState","setClickedState","map","item","index","key","GenerationSelection","onThemeButton","onGamsatButton","push","axios","defaults","baseURL","headers","common","APIClient","create","get","path","getQuotesAction","taskATheme","taskBTheme","dispatch","getQuotesRequest","getQuotes","then","response","responseData","getQuotesSuccess","catch","error","getQuotesFailure","type","getThemesAction","getThemesRequest","getThemesSuccess","getThemesFailure","selectTaskATheme","theme","selectTaskBTheme","getGamsatThemesAction","getGamsatThemesRequest","getGamsatThemesSuccess","getGamsatThemesFailure","getTaskATheme","store","quotes","task_a_theme","getTaskBTheme","task_b_theme","getTaskAQuotes","task_a_quotes","quote","text","getTaskBQuotes","task_b_quotes","getTaskAToggle","task_a_toggle","getTaskBToggle","task_b_toggle","getGamsatTitle","gamsat_title","PillList","SearchBar","onInputChange","fuse","Fuse","placeholder","onChange","query","currentTarget","value","results","search","filteredData","Modal","modalState","setModalState","setFilteredData","ReactModal","setAppElement","handleOnClick","isOpen","overlayClassName","openModal","connect","state","allTaskAThemes","task_a_themes","getAllTaskAThemes","allTaskBThemes","task_b_themes","getAllTaskBThemes","getThemes","modalData","setModalData","modalOnClick","setModalOnClick","allGamsatThemes","gamsat_themes","getAllGamsatThemes","getGamsatThemes","selectGamsat","year","month","selectGamsatAction","obj","selectedGamsatObj","find","gamsatObj","toString","substring","length","themeLoading","isLoading","themes","getThemeLoading","taskAToggle","taskBToggle","toggleTaskA","toggleTaskB","generationState","setGenerationState","renderTheme","HiddenButton","titleLabel","visibleLabel","hiddenLabel","initialState","onButtonClick","hiddenState","setHiddenState","Timer","timeRemaining","setTimeRemaining","timerActive","setTimerActive","timer","setTimeout","clearTimeout","ChipList","handleItemClick","ComponentToPrint","this","props","taskAQuotes","taskBQuotes","Component","copyAnimation","setCopyAnimation","componentRef","useRef","handlePrint","useReactToPrint","content","current","ref","copiedText","navigator","clipboard","writeText","onCopyToClipboard","onAnimationEnd","gamsatTitle","disclaimerState","setDisclaimerState","taskABreakdownThemes","breakdownThemes","subthemes","subtheme","includes","getTaskABreakdownThemes","taskBBreakdownThemes","getTaskBBreakdownThemes","taskABreakdown","selectedBreakdownTheme","task_a_breakdown_theme","attributed_text","attributed_text_start","attributed_text_end","getTaskABreakdown","taskBBreakdown","task_b_breakdown_theme","getTaskBBreakdown","selectTaskABreakdownTheme","breakdownTheme","selectTaskBBreakdownTheme","taskABreakdownState","setTaskABreakdownState","taskBBreakdownState","setTaskBBreakdownState","handleThemeAReveal","hiddenButtonState","handleThemeBReveal","renderQuotes","breakdowns","renderTaskBQuotes","App","exact","component","LandingPage","QuotePage","Boolean","hostname","match","combineReducers","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","composeWithDevTools","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0cfc00a8.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React, { useEffect } from \"react\";\r\nimport \"./Header.scss\";\r\nimport { useHistory, useLocation  } from \"react-router-dom\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\nfunction Header() {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    history.listen((location, action) => {\r\n      window.scrollTo(0, 0)\r\n    })\r\n  }, [])\r\n\r\n  const navigationBack = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <nav className=\"navigation\">\r\n        <div className={ location.pathname === \"/\" ? \"navigation__back-button navigation__back-button--hidden\" : \"navigation__back-button\" } onClick={ navigationBack }>\r\n          <ArrowBackIcon />\r\n        </div>\r\n      </nav>\r\n\r\n      <h1 className=\"header__title\">\r\n        GAMSAT Section II <br /> Quote Generator\r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            &nbsp;\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ToggleButton.scss';\r\n\r\nconst ToggleButton = ({ label, toggleState, setToggleState }) => {\r\n\r\n  const handleToggleState = () => {\r\n    setToggleState();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <span className=\"toggle__label\"> { label } </span>\r\n      <div className=\"toggle\" onClick={ handleToggleState }>\r\n        <div className={ toggleState ? \"toggle__bg toggle__bg--active\"\r\n                                      : \"toggle__bg\"}> &nbsp; </div>\r\n        <div className={ toggleState ? \"toggle__circle toggle__circle--active\"\r\n                                      : \"toggle__circle\"}> &nbsp; </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nToggleButton.propTypes = {\r\n  label: PropTypes.string,\r\n}\r\n  \r\nToggleButton.defaultProps = {\r\n  label: \"default\",\r\n}\r\n\r\nexport default ToggleButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './List.scss';\n\nconst List = ({ data, onItemClick }) => {\n    const [clickedState, setClickedState] = React.useState(-1);\n\n    return (\n        <div>\n            <div className=\"list\">\n                { data.map( (item, index) => {\n                    return <div className={ clickedState===index ? \"list__item list__item--clicked\"\n                                                                 : \"list__item\" }\n                                onClick={ () => { onItemClick(index);\n                                                  setClickedState(index); }}\n                                key={ index }> { item } </div>\n                })}\n            </div>\n        </div>\n    );\n}\n\nList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.string),\n    onItemClick: PropTypes.func\n}\n  \nList.defaultProps = {\n    data: [],\n    onItemClick: (index) => index\n}\n\nexport default List;\n\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./GenerationSelection.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport List from \"../../../../Components/List/List\";\r\n\r\nconst GenerationSelection = ({ onThemeButton, onGamsatButton }) => {\r\n  const history = useHistory();\r\n\r\n  const onItemClick = index => {\r\n    // random button clicked\r\n    if (index === 0) {\r\n      history.push(\"/quote\");\r\n\r\n      // theme button clicked\r\n    } else if (index === 1) {\r\n      onThemeButton();\r\n\r\n      // gamsat button clicked\r\n    } else if (index === 2) {\r\n      onGamsatButton();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"generate-section\">\r\n      <div className=\"generate\">\r\n        <div className=\"generate__title\"> Generate Quotes </div>\r\n        <div className=\"generate__selection-container\">\r\n          <List\r\n            data={[\"Random\", \"Theme\", \"Past GAMSAT \"]}\r\n            onItemClick={onItemClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nGenerationSelection.propTypes = {\r\n  onThemeButton: PropTypes.func,\r\n  onGamsatButton: PropTypes.func,\r\n};\r\n\r\n// todo: delete unsued defaultProps\r\nGenerationSelection.defaultProps = {\r\n  data: [],\r\n};\r\n\r\nexport default GenerationSelection;\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = \"https://d3bn8hft5v4bch.cloudfront.net/\";\r\n\r\naxios.defaults.headers.common['Content-Type'] = 'application/json';\r\n\r\nexport const APIClient = axios.create({});","import { APIClient } from './apiClient';\r\n\r\nconst get = (path) => APIClient.get(path);\r\nconst post = (path, data = {}) => APIClient.post(path, data);\r\nconst patch = (path, data = {}) => APIClient.patch(path, data);\r\n\r\nexport const getQuotes = (taskATheme, taskBTheme) => get(`/api/quotes?${taskATheme ? `task_a_theme=${ taskATheme }`: \"\"}&${taskBTheme ? `task_b_theme=${ taskBTheme }`: \"\"}`);\r\nexport const getThemes = () => get(`/api/quotes/themes`);\r\nexport const getGamsatThemes = () => get(`/api/quotes/gamsat`);\r\n","import {\r\n  getQuotes,\r\n  getThemes,\r\n  getGamsatThemes,\r\n} from \"../Services/quotesService\";\r\n\r\n// QUOTES\r\nexport const getQuotesAction = (taskATheme, taskBTheme) => {\r\n  return (dispatch) => {\r\n    dispatch(getQuotesRequest());\r\n    getQuotes(taskATheme, taskBTheme)\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .then((responseData) => {\r\n        dispatch(getQuotesSuccess(responseData));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(getQuotesFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const GET_QUOTES_REQUEST = \"GET_QUOTES_REQUEST\";\r\nconst getQuotesRequest = () => ({\r\n  type: GET_QUOTES_REQUEST,\r\n});\r\n\r\nexport const GET_QUOTES_SUCCESS = \"GET_QUOTES_SUCCESS\";\r\nconst getQuotesSuccess = (response) => ({\r\n  type: GET_QUOTES_SUCCESS,\r\n  response: response,\r\n});\r\n\r\nexport const GET_QUOTES_FAILURE = \"GET_QUOTES_FAILURE\";\r\nconst getQuotesFailure = (error) => ({\r\n  type: GET_QUOTES_FAILURE,\r\n  error: error,\r\n});\r\n\r\n// THEMES\r\nexport const getThemesAction = () => {\r\n  return (dispatch) => {\r\n    dispatch(getThemesRequest());\r\n    getThemes()\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .then((responseData) => {\r\n        dispatch(getThemesSuccess(responseData));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(getThemesFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const GET_THEMES_REQUEST = \"GET_THEMES_REQUEST\";\r\nconst getThemesRequest = () => ({\r\n  type: GET_THEMES_REQUEST,\r\n});\r\n\r\nexport const GET_THEMES_SUCCESS = \"GET_THEMES_SUCCESS\";\r\nconst getThemesSuccess = (response) => ({\r\n  type: GET_THEMES_SUCCESS,\r\n  response: response,\r\n});\r\n\r\nexport const GET_THEMES_FAILURE = \"GET_THEMES_FAILURE\";\r\nconst getThemesFailure = (error) => ({\r\n  type: GET_THEMES_FAILURE,\r\n  error: error,\r\n});\r\n\r\n// SELECTING THEME\r\nexport const SELECT_TASK_A_THEME = \"SELECT_TASK_A_THEME\";\r\nexport const selectTaskATheme = (theme) => ({\r\n  type: SELECT_TASK_A_THEME,\r\n  theme: theme,\r\n});\r\n\r\nexport const SELECT_TASK_B_THEME = \"SELECT_TASK_B_THEME\";\r\nexport const selectTaskBTheme = (theme) => ({\r\n  type: SELECT_TASK_B_THEME,\r\n  theme: theme,\r\n});\r\n\r\n// TASK A/B TOGGLE\r\nexport const TOGGLE_TASK_A = \"TOGGLE_TASK_A\";\r\nexport const toggleTaskAAction = () => ({\r\n  type: TOGGLE_TASK_A\r\n})\r\n\r\nexport const TOGGLE_TASK_B = \"TOGGLE_TASK_B\";\r\nexport const toggleTaskBAction = () => ({\r\n  type: TOGGLE_TASK_B\r\n})\r\n\r\n// SELECTING BREAKDOWN THEME\r\nexport const SELECT_TASK_A_BREAKDOWN_THEME = \"SELECT_TASK_A_BREAKDOWN_THEME\";\r\nexport const selectTaskABreakdownThemeAction = (theme) => ({\r\n  type: SELECT_TASK_A_BREAKDOWN_THEME,\r\n  theme: theme,\r\n});\r\n\r\nexport const SELECT_TASK_B_BREAKDOWN_THEME = \"SELECT_TASK_B_BREAKDOWN_THEME\";\r\nexport const selectTaskBBreakdownThemeAction = (theme) => ({\r\n  type: SELECT_TASK_B_BREAKDOWN_THEME,\r\n  theme: theme,\r\n});\r\n\r\n// Gamsat Themes\r\nexport const getGamsatThemesAction = () => {\r\n  return (dispatch) => {\r\n    dispatch(getGamsatThemesRequest());\r\n    getGamsatThemes()\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .then((responseData) => {\r\n        dispatch(getGamsatThemesSuccess(responseData));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(getGamsatThemesFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const GET_GAMSAT_THEMES_REQUEST = \"GET_GAMSAT_THEMES_REQUEST\";\r\nconst getGamsatThemesRequest = () => ({\r\n  type: GET_GAMSAT_THEMES_REQUEST,\r\n});\r\n\r\nexport const GET_GAMSAT_THEMES_SUCCESS = \"GET_GAMSAT_THEMES_SUCCESS\";\r\nconst getGamsatThemesSuccess = (response) => ({\r\n  type: GET_GAMSAT_THEMES_SUCCESS,\r\n  response: response,\r\n});\r\n\r\nexport const GET_GAMSAT_THEMES_FAILURE = \"GET_GAMSAT_THEMES_FAILURE\";\r\nconst getGamsatThemesFailure = (error) => ({\r\n  type: GET_GAMSAT_THEMES_FAILURE,\r\n  error: error,\r\n});\r\n\r\nexport const SELECT_GAMSAT = \"SELECT_GAMSAT\";\r\nexport const selectGamsatAction = (year, month) => ({\r\n  type: SELECT_GAMSAT,\r\n  year: year,\r\n  month: month\r\n})","// All Themes\r\nexport const getAllTaskAThemes = store => store.quotes.task_a_themes;\r\nexport const getAllTaskBThemes = store => store.quotes.task_b_themes;\r\n\r\n// Themes\r\nexport const getTaskATheme = store => store.quotes.task_a_theme;\r\nexport const getTaskBTheme = store => store.quotes.task_b_theme;\r\n\r\n// Generated Quotes\r\nexport const getTaskAQuotes = store => store.quotes.task_a_quotes.map((quote) => quote.text);\r\nexport const getTaskBQuotes = store => store.quotes.task_b_quotes.map((quote) => quote.text);\r\n\r\n// Task A/B Toggles\r\nexport const getTaskAToggle = store => store.quotes.task_a_toggle;\r\nexport const getTaskBToggle = store => store.quotes.task_b_toggle;\r\n\r\n// Breakdown Analysis\r\nexport const getTaskABreakdownThemes = store => (() => {\r\n  var breakdownThemes = [store.quotes.task_a_theme]\r\n  store.quotes.task_a_quotes.map((quote) => {\r\n    quote.subthemes.map((subtheme) => {\r\n      if (!breakdownThemes.includes(subtheme.theme)) {\r\n        breakdownThemes.push(subtheme.theme);\r\n      }\r\n    })\r\n  })\r\n  return breakdownThemes;\r\n})();\r\nexport const getTaskBBreakdownThemes = store => (() => {\r\n  var breakdownThemes = [store.quotes.task_b_theme]\r\n  store.quotes.task_b_quotes.map((quote) => {\r\n    quote.subthemes.map((subtheme) => {\r\n      if (!breakdownThemes.includes(subtheme.theme)) {\r\n        breakdownThemes.push(subtheme.theme);\r\n      }\r\n    })\r\n  })\r\n  return breakdownThemes;\r\n})();\r\nexport const getTaskABreakdown = store => (() => {\r\n  const selectedBreakdownTheme = store.quotes.task_a_breakdown_theme;\r\n  var taskABreakdown = [];\r\n  store.quotes.task_a_quotes.map((quote) => {\r\n    var attributed_text = [null, null];\r\n    quote.themes.map((theme) => {\r\n      if (theme.theme === selectedBreakdownTheme) {\r\n        attributed_text[0] = theme.attributed_text_start\r\n        attributed_text[1] = theme.attributed_text_end\r\n      }\r\n    })\r\n    quote.subthemes.map((subtheme) => {\r\n      if (subtheme.theme === selectedBreakdownTheme) {\r\n        attributed_text[0] = subtheme.attributed_text_start\r\n        attributed_text[1] = subtheme.attributed_text_end\r\n      }\r\n    })\r\n\r\n    taskABreakdown.push(attributed_text);\r\n  })\r\n  return taskABreakdown;\r\n})();\r\nexport const getTaskBBreakdown = store => (() => {\r\n  const selectedBreakdownTheme = store.quotes.task_b_breakdown_theme;\r\n  var taskBBreakdown = [];\r\n  store.quotes.task_b_quotes.map((quote) => {\r\n    var attributed_text = [null, null];\r\n    quote.themes.map((theme) => {\r\n      if (theme.theme === selectedBreakdownTheme) {\r\n        attributed_text[0] = theme.attributed_text_start\r\n        attributed_text[1] = theme.attributed_text_end\r\n      }\r\n    })\r\n    quote.subthemes.map((subtheme) => {\r\n      if (subtheme.theme === selectedBreakdownTheme) {\r\n        attributed_text[0] = subtheme.attributed_text_start\r\n        attributed_text[1] = subtheme.attributed_text_end\r\n      }\r\n    })\r\n\r\n    taskBBreakdown.push(attributed_text);\r\n  })\r\n  return taskBBreakdown;\r\n})();\r\n\r\n// Gamsat Themes\r\nexport const getAllGamsatThemes = store => store.quotes.gamsat_themes;\r\nexport const getGamsatTitle = store => store.quotes.gamsat_title;\r\n\r\n// isLoading\r\nexport const getQuoteLoading = store => store.isLoading.quotes;\r\nexport const getThemeLoading = store => store.isLoading.themes;","import React, {useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport './PillList.scss';\n\nconst PillList = ({ data, onItemClick }) => {\n    const [clickedState, setClickedState] = useState(-1);\n    \n    return (\n        <div>\n            <div className=\"pill-list\">\n                { data.map( (item, index) => {\n                    return <div className={ clickedState===index ? \"pill-list__item pill-list__item--clicked\"\n                                                                 : \"pill-list__item\" }\n                                onClick={ () => { onItemClick(index);\n                                                  setClickedState(index); }}\n                                key={ index }> { item } </div>\n                })}\n            </div>\n        </div>\n    );\n}\n\nPillList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.string),\n    onItemClick: PropTypes.func\n}\n  \nPillList.defaultProps = {\n    data: [],\n    onItemClick: (index) => index\n}\n\nexport default PillList;\n\n","import React, {useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchBar.scss';\nimport FuzzySearch from \"react-fuzzy\";\nimport Fuse from 'fuse.js'\n\nconst SearchBar = ({ data, onInputChange }) => {\n    const fuse = new Fuse(data);\n\n    const onSearch = ({ currentTarget }) => {\n        const query = currentTarget.value;\n        const results = fuse.search(query);\n        const filteredData = query ? results.map(item => item.item) : data;\n        onInputChange(filteredData);\n    }\n\n    return (\n        <div className=\"search\">\n            <input className=\"search__input\"\n                    type=\"text\"\n                    placeholder=\"search\"\n                    onChange={onSearch} />\n        </div>\n    );\n}\n\nSearchBar.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.string),\n    onInputChange: PropTypes.func\n}\n  \nSearchBar.defaultProps = {\n    data: [],\n    onInputChange: (index) => index\n}\n\nexport default SearchBar;\n\n","import React,  { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport './Modal.scss';\nimport ReactModal from \"react-modal\";\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport SearchBar from \"../../Components/SearchBar/SearchBar\";\nimport PillList from \"../../Components/PillList/PillList\";\n\nconst Modal = ({ data, onItemClick, modalState, setModalState }) => {\n  const [filteredData, setFilteredData] = useState(data)\n\n  useEffect(() => {\n    ReactModal.setAppElement('body');\n    setFilteredData(data)\n  }, [data]);\n\n  const handleOnClick = (index) => {\n    onItemClick(filteredData[index])\n  }\n\n  const renderContent = () => {\n    return (\n      <div>\n        <div className=\"modal\">\n          <div className=\"modal__top-controls\">\n          <CancelIcon onClick={() => setModalState(false)}></CancelIcon>\n          <SearchBar data={data} onInputChange={setFilteredData}/>\n          </div>\n          \n          <PillList data={filteredData} onItemClick={handleOnClick}/>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <ReactModal \n    isOpen={modalState}\n    className=\"modal__modal\"\n    overlayClassName=\"modal__overlay\"\n    >\n    { renderContent() }\n    </ReactModal>\n  );\n}\n\nModal.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.string),\n    onItemClick: PropTypes.func,\n    openModal: PropTypes.func\n}\n  \nModal.defaultProps = {\n    data: [],\n    onItemClick: (index) => index,\n    openModal: () => null\n}\n\nexport default Modal;\n\n","import React,  { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./SelectTheme.scss\";\r\nimport { getThemesAction,\r\n\t\t\t\t selectTaskATheme,\r\n\t\t\t\t selectTaskBTheme } from \"../../../../Redux/actions\";\r\nimport { getAllTaskAThemes,\r\n         getAllTaskBThemes,\r\n         getTaskATheme,\r\n         getTaskBTheme } from \"../../../../Redux/selectors\";\r\nimport PillList from \"../../../../Components/PillList/PillList\";\r\nimport SearchBar from \"../../../../Components/SearchBar/SearchBar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Modal from \"../../../../Components/Modal/Modal\";\r\n\r\nconst SelectTheme = ({ allTaskAThemes, allTaskBThemes, taskATheme, taskBTheme,\r\n                       getThemes, selectTaskATheme, selectTaskBTheme }) => {\r\n  const history = useHistory();\r\n  const [modalState, setModalState] = useState(false);\r\n  const [modalData, setModalData] = useState([]);\r\n  const [modalOnClick, setModalOnClick] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getThemes();\r\n  }, []);\r\n\r\n  const handleTaskAModal = () => {\r\n    setModalState(true);\r\n    setModalData(allTaskAThemes);\r\n    setModalOnClick(() => (item) => {\r\n      selectTaskATheme(item);\r\n      setModalState(false);\r\n    })\r\n  }\r\n\r\n  const handleTaskBModal = () => {\r\n    setModalState(true);\r\n    setModalData(allTaskBThemes);\r\n    setModalOnClick(() => (item) => {\r\n      selectTaskBTheme(item);\r\n      setModalState(false);\r\n    })\r\n  }\r\n\r\n  const onGenerate = () => {\r\n    history.push(\"/quote\");\r\n  };\r\n\r\n  return (\r\n    <section className=\"themes-section\">\r\n      <div className=\"select-theme\">\r\n        <h2 className=\"select-theme__title\">Task A Theme</h2>\r\n        <div className=\"select-theme__button\"\r\n             onClick={handleTaskAModal}>\r\n             { taskATheme ? taskATheme : \"Select Theme\" }\r\n        </div>\r\n        <h2 className=\"select-theme__title\">Task B Theme</h2>\r\n        <div className=\"select-theme__button\"\r\n             onClick={handleTaskBModal}>\r\n          { taskBTheme ? taskBTheme : \"Select Theme\" }\r\n        </div>\r\n        <div className=\"select-theme__generate-button\" onClick={() => onGenerate()}>\r\n          Generate\r\n        </div>\r\n      </div>\r\n\r\n      <Modal data={modalData}\r\n             onItemClick={modalOnClick}\r\n             modalState={modalState}\r\n             setModalState={setModalState}/>\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const allTaskAThemes = getAllTaskAThemes(state);\r\n  const allTaskBThemes = getAllTaskBThemes(state);\r\n  const taskATheme = getTaskATheme(state);\r\n  const taskBTheme = getTaskBTheme(state);\r\n  return { allTaskAThemes, allTaskBThemes, taskATheme, taskBTheme };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getThemes: () => dispatch(getThemesAction()),\r\n    selectTaskATheme: (theme) => dispatch(selectTaskATheme(theme)),\r\n    selectTaskBTheme: (theme) => dispatch(selectTaskBTheme(theme)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectTheme);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './SelectGamsatTheme.scss';\r\nimport { useEffect } from 'react';\r\nimport { getGamsatThemesAction, selectGamsatAction, selectTaskATheme, selectTaskBTheme } from '../../../../Redux/actions'\r\nimport { getAllGamsatThemes } from '../../../../Redux/selectors';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Modal from \"../../../../Components/Modal/Modal\";\r\n\r\nconst SelectGamsatTheme = ({ allGamsatThemes, getGamsatThemes, selectTaskATheme, selectTaskBTheme, selectGamsat }) => {\r\n  const history = useHistory();\r\n  const [modalState, setModalState] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getGamsatThemes();\r\n  }, []);\r\n\r\n  const onGamsatClick = (item) => {\r\n    const selectedGamsatObj = allGamsatThemes.find(gamsatObj => gamsatObj.year.toString() === item.substring(0, 4) && gamsatObj.month.toString() === item.substring(7, item.length))\r\n    selectTaskATheme(selectedGamsatObj.task_a_theme);\r\n    selectTaskBTheme(selectedGamsatObj.task_b_theme);\r\n    selectGamsat(selectedGamsatObj.year, selectedGamsatObj.month);\r\n    history.push(\"/quote\");\r\n  }\r\n\r\n  return (\r\n    <section className=\"gamsat-section\">\r\n      <Modal data={allGamsatThemes.map(obj => `${obj.year} - ${obj.month}`)}\r\n             onItemClick={onGamsatClick}\r\n             modalState={modalState}\r\n             setModalState={setModalState}/>\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const allGamsatThemes = getAllGamsatThemes(state);\r\n    return { allGamsatThemes }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getGamsatThemes: () => dispatch(getGamsatThemesAction()),\r\n    selectTaskATheme: (theme) => dispatch(selectTaskATheme(theme)),\r\n    selectTaskBTheme: (theme) => dispatch(selectTaskBTheme(theme)),\r\n    selectGamsat: (year, month) => dispatch(selectGamsatAction(year, month))\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectGamsatTheme);\r\n","import React, {useState} from 'react';\r\nimport \"./LandingPage.scss\";\r\nimport Togglebutton from \"../../Components/ToggleButton/ToggleButton\";\r\nimport GenerationSelection from \"./Components/GenerationSelection/GenerationSelection\";\r\nimport SelectTheme from \"./Components/SelectTheme/SelectTheme\";\r\nimport SelectGamsatTheme from \"./Components/SelectGamsatTheme/SelectGamsatTheme\";\r\nimport { connect } from \"react-redux\";\r\nimport { getTaskAToggle, getTaskBToggle, getThemeLoading } from \"../../Redux/selectors\";\r\nimport { toggleTaskAAction, toggleTaskBAction } from '../../Redux/actions';\r\n\r\nconst LandingPage = ({taskAToggle, taskBToggle, toggleTaskA, toggleTaskB}) => {\r\n  const [generationState, setGenerationState] = useState(0);\r\n\r\n  const renderTheme = () => {\r\n    switch (generationState) {\r\n      case 0:\r\n        return <div />;\r\n      case 1:\r\n        return <SelectTheme />;\r\n      case 2:\r\n        return <SelectGamsatTheme />;\r\n      default:\r\n        return <div />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"landing-section\">\r\n      <h2 className=\"description\">\r\n        Welcome to our Free GAMSAT Quote Generator. <br />\r\n        To begin please select the tasks you want to write on and then click on the method of generation.\r\n      </h2>\r\n      <div className=\"toggle-button\">\r\n        <div className=\"toggle-button__container\">\r\n          <div className=\"toggle-button__button\">\r\n            <Togglebutton label=\"TASK A\" toggleState={taskAToggle} setToggleState={toggleTaskA} />\r\n          </div>\r\n          <div className=\"toggle-button__button\">\r\n            <Togglebutton label=\"TASK B\" toggleState={taskBToggle} setToggleState={toggleTaskB}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <GenerationSelection\r\n        onThemeButton={() => setGenerationState(1)}\r\n        onGamsatButton={() => setGenerationState(2)}\r\n      />\r\n\r\n      {renderTheme()}\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const themeLoading = getThemeLoading(state);\r\n  const taskAToggle = getTaskAToggle(state);\r\n  const taskBToggle = getTaskBToggle(state);\r\n  return { themeLoading, taskAToggle, taskBToggle };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleTaskA: () => dispatch(toggleTaskAAction()),\r\n    toggleTaskB: () => dispatch(toggleTaskBAction())\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LandingPage);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './HiddenButton.scss';\r\n\r\nconst HiddenButton = ({ titleLabel, visibleLabel, hiddenLabel, initialState, onButtonClick }) => {\r\n  const [hiddenState, setHiddenState] = React.useState(initialState);\r\n\r\n  const handleClick = () => {\r\n    onButtonClick(hiddenState ^ 1)\r\n    setHiddenState(hiddenState ^ 1)\r\n  }\r\n\r\n  return (\r\n    <div className=\"hidden-button\">\r\n      { titleLabel } - &nbsp;\r\n      <div className=\"hidden-button__card\"\r\n        onClick={ handleClick }>\r\n        <div className={hiddenState ? \"hidden-button__card__item hidden-button__card__item__visible\"\r\n                                    : \"hidden-button__card__item hidden-button__card__item__visible hidden-button__card__item__visible--clicked\"}> { visibleLabel } </div>\r\n        <div className={hiddenState ? \"hidden-button__card__item hidden-button__card__item__hidden\"\r\n                                    : \"hidden-button__card__item hidden-button__card__item__hidden hidden-button__card__item__hidden--clicked\"}> { hiddenLabel } </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nHiddenButton.propTypes = {\r\n  titleLabel: PropTypes.string,\r\n  visibleLabel: PropTypes.string,\r\n  hiddenLabel: PropTypes.string,\r\n  initialState: PropTypes.number,\r\n  onButtonClick: PropTypes.func,\r\n}\r\n  \r\nHiddenButton.defaultProps = {\r\n  titleLabel: \"title\", \r\n  visibleLabel: \"visible\",\r\n  hiddenLabel: \"hidden\",\r\n  initialState: 1,\r\n  onButtonClick: (hiddenState) => 1\r\n}\r\n\r\nexport default HiddenButton;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./Timer.scss\";\r\n\r\nconst Timer = () => {\r\n  const [timeRemaining, setTimeRemaining] = React.useState(5400);\r\n  const [timerActive, setTimerActive] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    if (timerActive) {\r\n      const timer = setTimeout(() => {\r\n        setTimeRemaining(timeRemaining - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [timerActive, timeRemaining]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"timer\">\r\n        <div className=\"timer__display\">\r\n          {/* decouple the following code to a function is better for readabilty */}\r\n          0{~~(timeRemaining / 3600)} :{\" \"}\r\n          {~~(timeRemaining / 60) - ~~(timeRemaining / 3600) * 60} :{\" \"}\r\n          {(\r\n            timeRemaining -\r\n            (~~(timeRemaining / 60) - ~~(timeRemaining / 3600) * 60) * 60 -\r\n            ~~(timeRemaining / 3600) * 3600\r\n          ).toString().length != 2\r\n            ? \"0\"\r\n            : \"\"}\r\n          {timeRemaining -\r\n            (~~(timeRemaining / 60) - ~~(timeRemaining / 3600) * 60) * 60 -\r\n            ~~(timeRemaining / 3600) * 3600}\r\n        </div>\r\n        <div className=\"timer__control\">\r\n          <div className=\"timer__item\" onClick={() => setTimerActive(1)}>\r\n            start\r\n          </div>\r\n          <div className=\"timer__item\" onClick={() => setTimerActive(0)}>\r\n            stop\r\n          </div>\r\n          <div className=\"timer__item\" onClick={() => setTimeRemaining(5400)}>\r\n            reset\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React, {useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport './ChipList.scss';\n\nconst ChipList = ({ data, onItemClick }) => {\n    const [clickedState, setClickedState] = useState(-1);\n\n    const handleItemClick = (index) => {\n        if (index === clickedState) {\n            setClickedState(-1);\n            onItemClick(-1);\n        } else {\n            onItemClick(index);\n            setClickedState(index);\n        }\n        \n    }\n    \n    return (\n        <div>\n            <div className=\"chip-list\">\n                { data.map( (item, index) => {\n                    return <div className={ clickedState===index ? \"chip-list__item chip-list__item--clicked\"\n                                                                 : \"chip-list__item\" }\n                                onClick={ () => { handleItemClick(index) }}\n                                key={ index }> { item } </div>\n                })}\n            </div>\n        </div>\n    );\n}\n\nChipList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.string),\n    onItemClick: PropTypes.func\n}\n  \nChipList.defaultProps = {\n    data: [],\n    onItemClick: (index) => index\n}\n\nexport default ChipList;\n\n","import React, { useRef } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './Utilities.scss';\r\nimport { getTaskATheme,\r\n  getTaskBTheme,\r\n  getTaskAQuotes,\r\n  getTaskBQuotes } from \"../../../../Redux/selectors\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport HiddenButton from \"../../../../Components/HiddenButton/HiddenButton\";\r\n\r\nconst Utilities = ({ taskATheme, taskBTheme, taskAQuotes, taskBQuotes }) => {\r\n  const [copyAnimation, setCopyAnimation] = React.useState(false);\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  const onCopyToClipboard = () => {\r\n    setCopyAnimation(true);\r\n\r\n    const copiedText = `\r\nTask A - ${taskATheme}\r\n${taskAQuotes.map((quote, index) => `${index + 1}. ${quote}\\n`)}\r\n\r\nTask B - ${taskBTheme}\r\n${taskBQuotes.map((quote, index) => `${index + 1}. ${quote}\\n`)}\r\n        `;\r\n    navigator.clipboard.writeText(copiedText);\r\n  };\r\n\r\n  return (\r\n    <div className=\"utilities\">\r\n      <div className=\"print-component\">\r\n        <ComponentToPrint\r\n          taskATheme={taskATheme}\r\n          taskBTheme={taskBTheme}\r\n          taskAQuotes={taskAQuotes}\r\n          taskBQuotes={taskBQuotes}\r\n          ref={componentRef}\r\n        />\r\n      </div>\r\n      <div className=\"utilities__container\">\r\n        <div\r\n          className=\"utilities__button\"\r\n          onClick={() => onCopyToClipboard()}\r\n        >\r\n          <span\r\n            className={ copyAnimation ? \"utilities__button__clipboard--active\" : \"utilities__button__clipboard\"}\r\n            onAnimationEnd={ () => setCopyAnimation(false) }\r\n          > Copy To Clipboard</span>\r\n          <span\r\n            className={ copyAnimation ? \"utilities__button__copied utilities__button__copied--active\" : \"utilities__button__copied\" }\r\n          > Copied! </span>\r\n        </div>\r\n        <div className=\"utilities__button\" onClick={handlePrint}>\r\n          Print\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass ComponentToPrint extends React.Component {\r\n  render() {\r\n    const taskATheme = this.props.taskATheme;\r\n    const taskBTheme = this.props.taskBTheme;\r\n    const taskAQuotes = this.props.taskAQuotes;\r\n    const taskBQuotes = this.props.taskBQuotes;\r\n\r\n    return (\r\n      <div className=\"print\">\r\n        <div className=\"quotes\">\r\n          <h2 className=\"quotes__title\">\r\n            <HiddenButton\r\n              titleLabel=\"Task A\"\r\n              visibleLabel={taskATheme}\r\n              hiddenLabel=\"\"\r\n              initialState={1}\r\n            />\r\n          </h2>\r\n          <ul className=\"quotes__list\">\r\n            {taskAQuotes.map((quote, index) => (\r\n              <li className=\"quotes__item\">\r\n                <p>\r\n                  {index + 1}. {quote}\r\n                </p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <h2 className=\"quotes__title\">\r\n            <HiddenButton\r\n              titleLabel=\"Task B\"\r\n              visibleLabel={taskBTheme}\r\n              hiddenLabel=\"\"\r\n              initialState={1}\r\n            />\r\n          </h2>\r\n          <ul className=\"quotes__list\">\r\n            {taskBQuotes.map((quote, index) => (\r\n              <li className=\"quotes__item\">\r\n                <p>\r\n                  {index + 1}. {quote}\r\n                </p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const taskATheme = getTaskATheme(state);\r\n  const taskBTheme = getTaskBTheme(state);\r\n  const taskAQuotes = getTaskAQuotes(state);\r\n  const taskBQuotes = getTaskBQuotes(state);\r\n  return { taskATheme, taskBTheme, taskAQuotes, taskBQuotes };\r\n};\r\n\r\nconst mapDispatchToProps = null\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Utilities);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './GamsatTitleAndDisclaimer.scss';\r\nimport { getGamsatTitle } from \"../../../../Redux/selectors\"\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport { connect } from \"react-redux\";\r\n\r\nconst GamsatTitleAndDisclaimer = ({ gamsatTitle }) => {\r\n  const [disclaimerState, setDisclaimerState] = React.useState(false);\r\n\r\n  return (\r\n    <div>\r\n      { gamsatTitle ? (\r\n        <div className=\"gamsat\">\r\n          <h2 className=\"gamsat__title\">{ gamsatTitle } <HelpIcon onClick={() => setDisclaimerState(!disclaimerState)} /></h2>\r\n          <h3 className={ disclaimerState ? \"gamsat__disclaimer gamsat__disclaimer--active\" : \"gamsat__disclaimer\" }>\r\n            Please note that the prompts generated below are not the same\r\n            prompts presented in the specified Graduate Medical School\r\n            Admissions Test (GAMSAT). They are instead intended to reflect\r\n            similar themes, ideas, and concerns of the prompts of that\r\n            particular test. This is in line with ACER's copyright misconduct\r\n            regulations which protects all GAMSAT material from being reproduced\r\n            and distributed.\r\n          </h3>\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const gamsatTitle = getGamsatTitle(state);\r\n  return { gamsatTitle };\r\n};\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GamsatTitleAndDisclaimer);\r\n","import React, { useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./QuotePage.scss\";\r\nimport { getQuotesAction, selectTaskABreakdownThemeAction, selectTaskBBreakdownThemeAction } from \"../../Redux/actions\";\r\nimport { useEffect } from \"react\";\r\nimport { getTaskATheme,\r\n         getTaskBTheme,\r\n         getTaskAQuotes,\r\n         getTaskBQuotes,\r\n         getTaskABreakdownThemes,\r\n         getTaskBBreakdownThemes,\r\n         getTaskABreakdown,\r\n         getTaskBBreakdown, \r\n         getTaskAToggle,\r\n         getTaskBToggle,\r\n         getGamsatTitle} from \"../../Redux/selectors\";\r\nimport HiddenButton from \"../../Components/HiddenButton/HiddenButton\";\r\nimport Timer from \"../../Components/Timer/Timer\";\r\nimport ChipList from \"../../Components/ChipList/ChipList\";\r\nimport Utilities from \"./Components/Utilities/Utilities\";\r\nimport GamsatTitleAndDisclaimer from \"./Components/GamsatTitleAndDisclaimer/GamsatTitleAndDisclaimer\";\r\n\r\nconst QuotePage = ({ taskATheme, taskBTheme, taskAQuotes, taskBQuotes,\r\n                     taskAToggle, taskBToggle, taskABreakdownThemes,\r\n                     taskBBreakdownThemes, taskABreakdown, taskBBreakdown,\r\n                     gamsatTitle, getQuotes, selectTaskABreakdownTheme,\r\n                     selectTaskBBreakdownTheme }) => {\r\n  const [taskABreakdownState, setTaskABreakdownState] = React.useState(0);\r\n  const [taskBBreakdownState, setTaskBBreakdownState] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    // task was selected: generate by theme\r\n    if (taskATheme || taskBTheme) {\r\n      getQuotes(taskATheme, taskBTheme);\r\n\r\n    // no task was selected: generate randomly\r\n    } else {\r\n      getQuotes();\r\n    }\r\n  }, []);\r\n\r\n  const handleThemeAReveal = (hiddenButtonState) => {\r\n    setTaskABreakdownState(hiddenButtonState ^ 1);\r\n  }\r\n\r\n  const handleThemeBReveal = (hiddenButtonState) => {\r\n    setTaskBBreakdownState(hiddenButtonState ^ 1);\r\n  }\r\n\r\n  const renderQuotes = (quotes, breakdowns) => {\r\n\r\n    return (<ul className=\"quotes__list\">\r\n      {quotes.map((quote, index) => {\r\n        if (breakdowns[index][0] === null && breakdowns[index][1] === null) {\r\n          return <li className=\"quotes__item\"><p>{index + 1}. {quote}</p></li>;\r\n        } else {\r\n          return <li className=\"quotes__item\"><p>{index + 1}. {quote.substring(0, breakdowns[index][0])}<span className=\"quotes__item--highlight\">{quote.substring(breakdowns[index][0], breakdowns[index][1]+1)}</span>{quote.substring(breakdowns[index][1]+1, quote.length)}</p></li>;\r\n        }\r\n      })}\r\n    </ul>)\r\n  }\r\n\r\n  const renderTaskAQuotes = () => {\r\n    if (taskAToggle) {\r\n      return (\r\n        <div>\r\n          <h2 className=\"quotes__title\">\r\n            <HiddenButton\r\n              titleLabel=\"Task A\"\r\n              visibleLabel=\"Reveal Theme\"\r\n              hiddenLabel={taskATheme}\r\n              initialState={1}\r\n              onButtonClick={handleThemeAReveal}\r\n            />\r\n          </h2>\r\n          <div className={taskABreakdownState ? \"quotes__breakdown quotes__breakdown--active\" : \"quotes__breakdown\"}>\r\n            <ChipList data={taskABreakdownThemes} onItemClick={index => selectTaskABreakdownTheme(taskABreakdownThemes[index])} />\r\n          </div>\r\n          <ul className=\"quotes__list\">\r\n            {renderQuotes(taskAQuotes, taskABreakdown)}\r\n          </ul>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div></div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const renderTaskBQuotes = () => {\r\n    if (taskBToggle) {\r\n      return (\r\n        <div>\r\n          <h2 className=\"quotes__title\">\r\n            <HiddenButton\r\n              titleLabel=\"Task B\"\r\n              visibleLabel=\"Reveal Theme\"\r\n              hiddenLabel={taskBTheme}\r\n              initialState={1}\r\n              onButtonClick={handleThemeBReveal}\r\n            />\r\n          </h2>\r\n          <div className={taskBBreakdownState ? \"quotes__breakdown quotes__breakdown--active\" : \"quotes__breakdown\"}>\r\n            <ChipList data={taskBBreakdownThemes} onItemClick={index => selectTaskBBreakdownTheme(taskBBreakdownThemes[index])} />\r\n          </div>\r\n          <ul className=\"quotes__list\">\r\n            {renderQuotes(taskBQuotes, taskBBreakdown)}\r\n          </ul>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section className=\"quotes-section\">\r\n      <div>\r\n        <Timer />\r\n        <Utilities />\r\n        <GamsatTitleAndDisclaimer />\r\n\r\n        <div className=\"quotes\">\r\n          { renderTaskAQuotes() }\r\n          { renderTaskBQuotes() }\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const taskATheme = getTaskATheme(state);\r\n  const taskBTheme = getTaskBTheme(state);\r\n  const taskAQuotes = getTaskAQuotes(state);\r\n  const taskBQuotes = getTaskBQuotes(state);\r\n  const taskAToggle = getTaskAToggle(state);\r\n  const taskBToggle = getTaskBToggle(state);\r\n  const taskABreakdownThemes = getTaskABreakdownThemes(state);\r\n  const taskBBreakdownThemes = getTaskBBreakdownThemes(state);\r\n  const taskABreakdown = getTaskABreakdown(state);\r\n  const taskBBreakdown = getTaskBBreakdown(state);\r\n  const gamsatTitle = getGamsatTitle(state);\r\n  return { taskATheme, taskBTheme, taskAQuotes, taskBQuotes, taskAToggle,\r\n           taskBToggle, taskABreakdownThemes, taskBBreakdownThemes,\r\n           taskABreakdown, taskBBreakdown, gamsatTitle };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getQuotes: (taskATheme, taskBTheme) =>\r\n      dispatch(getQuotesAction(taskATheme, taskBTheme)),\r\n    selectTaskABreakdownTheme: (breakdownTheme) =>\r\n      dispatch(selectTaskABreakdownThemeAction(breakdownTheme)),\r\n    selectTaskBBreakdownTheme: (breakdownTheme) =>\r\n      dispatch(selectTaskBBreakdownThemeAction(breakdownTheme)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(QuotePage);\r\n","import React from 'react';\nimport { Router, Route } from 'react-router-dom';\nimport history from '../../history';\nimport Header from '../../Components/Header/Header'\nimport Footer from '../../Components/Footer/Footer'\nimport LandingPage from '../LandingPage/LandingPage'\nimport QuotePage from '../QuotePage/QuotePage'\n\nfunction App() {\n    return (\n        <Router history={ history }>\n            <Header />\n            <div>\n                <Route path=\"/\" exact component={ LandingPage } />\n                <Route path=\"/quote\" component={ QuotePage } />\n            </div>\n            <Footer />\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  GET_QUOTES_REQUEST,\r\n  GET_QUOTES_SUCCESS,\r\n  GET_QUOTES_FAILURE,\r\n  GET_THEMES_REQUEST,\r\n  GET_THEMES_SUCCESS,\r\n  GET_THEMES_FAILURE,\r\n} from \"../../Redux/actions\";\r\n\r\nconst initialState = {\r\n  quotes: false,\r\n  themes: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    // QUOTES\r\n    case GET_QUOTES_REQUEST: {\r\n      return {\r\n        ...state,\r\n        quotes: true,\r\n      };\r\n    }\r\n    case GET_QUOTES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        quotes: false,\r\n      };\r\n    }\r\n    case GET_QUOTES_FAILURE: {\r\n      return {\r\n        ...state,\r\n        quotes: false,\r\n      };\r\n    }\r\n\r\n    // THEMES\r\n    case GET_THEMES_REQUEST: {\r\n      return {\r\n        ...state,\r\n        themes: true,\r\n      };\r\n    }\r\n    case GET_THEMES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        themes: false,\r\n      };\r\n    }\r\n    case GET_THEMES_FAILURE: {\r\n      return {\r\n        ...state,\r\n        themes: false,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  GET_QUOTES_SUCCESS,\r\n  GET_THEMES_REQUEST,\r\n  GET_THEMES_SUCCESS,\r\n  SELECT_TASK_A_THEME,\r\n  SELECT_TASK_B_THEME,\r\n  TOGGLE_TASK_A,\r\n  TOGGLE_TASK_B,\r\n  SELECT_TASK_A_BREAKDOWN_THEME,\r\n  SELECT_TASK_B_BREAKDOWN_THEME,\r\n  GET_GAMSAT_THEMES_SUCCESS,\r\n  SELECT_GAMSAT,\r\n} from \"../../Redux/actions\";\r\n\r\nconst initialState = {\r\n  // Active Quotes and Themes\r\n  task_a_theme: null,\r\n  task_a_quotes: [],\r\n  task_b_theme: null,\r\n  task_b_quotes: [],\r\n\r\n  // Quote Breakdown\r\n  task_a_breakdown_theme: null,\r\n  task_b_breakdown_theme: null,\r\n\r\n  // Listing Themes\r\n  task_a_themes: [],\r\n  task_b_themes: [],\r\n\r\n  // Listing Gamsat Themes\r\n  gamsat_themes: [],\r\n  gamsat_title: null,\r\n\r\n  // Task A/B Toggles\r\n  task_a_toggle: true,\r\n  task_b_toggle: true,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_QUOTES_SUCCESS: {\r\n      const response = action.response;\r\n      return {\r\n        ...state,\r\n        task_a_theme: response.task_a_quotes[0].themes[0].theme,\r\n        task_a_quotes: response.task_a_quotes.map((quote) => quote),\r\n        task_b_theme: response.task_b_quotes[0].themes[0].theme,\r\n        task_b_quotes: response.task_b_quotes.map((quote) => quote),\r\n      };\r\n    }\r\n    case GET_THEMES_REQUEST: {\r\n      return {\r\n        ...state,\r\n        task_a_theme: null,\r\n        task_b_theme: null,\r\n      };\r\n    }\r\n    case GET_THEMES_SUCCESS: {\r\n      const response = action.response;\r\n      return {\r\n        ...state,\r\n        task_a_themes: response.task_a_themes,\r\n        task_b_themes: response.task_b_themes,\r\n      };\r\n    }\r\n    case SELECT_TASK_A_THEME: {\r\n      const theme = action.theme;\r\n      return {\r\n        ...state,\r\n        task_a_theme: theme,\r\n      };\r\n    }\r\n    case SELECT_TASK_B_THEME: {\r\n      const theme = action.theme;\r\n      return {\r\n        ...state,\r\n        task_b_theme: theme,\r\n      };\r\n    }\r\n    case TOGGLE_TASK_A:  {\r\n      return {\r\n        ...state,\r\n        task_a_toggle: !state.task_a_toggle\r\n      }\r\n    }\r\n    case TOGGLE_TASK_B:  {\r\n      return {\r\n        ...state,\r\n        task_b_toggle: !state.task_b_toggle\r\n      }\r\n    }\r\n    case SELECT_TASK_A_BREAKDOWN_THEME: {\r\n      const theme = action.theme;\r\n      return {\r\n        ...state,\r\n        task_a_breakdown_theme: theme,\r\n      };\r\n    }\r\n    case SELECT_TASK_B_BREAKDOWN_THEME: {\r\n      const theme = action.theme;\r\n      return {\r\n        ...state,\r\n        task_b_breakdown_theme: theme,\r\n      };\r\n    }\r\n    case GET_GAMSAT_THEMES_SUCCESS: {\r\n      const response = action.response;\r\n      return {\r\n        ...state,\r\n        gamsat_themes: response,\r\n      };\r\n    }\r\n    case SELECT_GAMSAT: {\r\n      const year = action.year;\r\n      const month = action.month;\r\n      return {\r\n        ...state,\r\n        gamsat_title: `${year} - ${month}`\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport isLoading from \"./isLoading\";\r\nimport quotes from \"./quotes\";\r\n\r\nexport default combineReducers({ isLoading, quotes });\r\n","import { applyMiddleware, createStore, compose } from \"redux\";\r\nimport rootReducer from \"./Reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware);\r\nconst composedEnhancers = composeWithDevTools(middlewareEnhancer);\r\n\r\nexport default createStore(rootReducer, composedEnhancers);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./Pages/App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}