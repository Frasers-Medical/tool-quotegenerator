{"version":3,"sources":["history.js","Components/Header/Header.js","Components/Footer/Footer.js","Components/ToggleButton/ToggleButton.js","Components/List/List.js","Pages/LandingPage/Components/GenerationSelection/GenerationSelection.js","Services/apiClient.js","Services/quotesService.js","Redux/actions.js","Redux/selectors.js","Components/PillList/PillList.js","Components/SearchBar/SearchBar.js","Pages/LandingPage/Components/SelectTheme/SelectTheme.js","Pages/LandingPage/Components/SelectGamsatTheme/SelectGamsatTheme.js","Pages/LandingPage/LandingPage.js","Components/HiddenButton/HiddenButton.js","Components/Timer/Timer.js","Pages/QuotePage/QuotePage.js","Pages/App/App.js","serviceWorker.js","Redux/Reducers/isLoading.js","Redux/Reducers/quotes.js","Redux/Reducers/index.js","Redux/store.js","index.js"],"names":["createBrowserHistory","Header","history","useHistory","className","onClick","goBack","Footer","ToggleButton","label","React","useState","toggleState","setToggleState","defaultProps","List","data","onItemClick","clickedState","setClickedState","map","item","index","key","GenerationSelection","onThemeButton","onGamsatButton","push","axios","defaults","baseURL","headers","common","APIClient","create","get","path","getQuotesAction","taskATheme","taskBTheme","dispatch","getQuotesRequest","getQuotes","then","response","responseData","getQuotesSuccess","catch","error","getQuotesFailure","type","getThemesAction","getThemesRequest","getThemesSuccess","getThemesFailure","selectTaskATheme","theme","selectTaskBTheme","getGamsatThemesAction","getGamsatThemesRequest","getGamsatThemesSuccess","getGamsatThemesFailure","getTaskATheme","store","quotes","task_a_theme","getTaskBTheme","task_b_theme","PillList","SearchBar","onInputChange","fuse","Fuse","placeholder","onChange","query","currentTarget","value","results","search","filteredData","connect","state","allTaskAThemes","task_a_themes","getAllTaskAThemes","allTaskBThemes","task_b_themes","getAllTaskBThemes","getThemes","taskModalState","setTaskModalState","filteredThemes","setFilteredThemes","useEffect","onTaskAItemClick","onTaskBItemClick","getFilteredThemes","themeModal","allGamsatThemes","gamsat_themes","getAllGamsatThemes","getGamsatThemes","year","month","selectedTaskATheme","selectedTaskBTheme","themeLoading","isLoading","themes","getThemeLoading","generationState","setGenerationState","renderTheme","HiddenButton","titleLabel","visibleLabel","hiddenLabel","initialState","hiddenState","setHiddenState","Timer","timeRemaining","setTimeRemaining","timerActive","setTimerActive","timer","setTimeout","clearTimeout","toString","length","ComponentToPrint","this","props","taskAQuotes","taskBQuotes","quote","Component","task_a_quotes","getTaskAQuotes","task_b_quotes","getTaskBQuotes","componentRef","useRef","handlePrint","useReactToPrint","content","current","ref","copiedText","navigator","clipboard","writeText","onCopyToClipboard","App","exact","component","LandingPage","QuotePage","Boolean","window","location","hostname","match","combineReducers","action","text","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","composeWithDevTools","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","console","message"],"mappings":"qcAEeA,gB,yBCyBAC,MAtBf,WACE,IAAMC,EAAUC,cAMhB,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,0BAA0BC,QAPlC,WACXH,EAAQI,WAOF,kBAAC,IAAD,QAIJ,wBAAIF,UAAU,iBAAd,qBACoB,6BADpB,sB,OCTSG,MARf,WACI,OACI,4BAAQH,UAAU,UAAlB,S,OCDFI,G,cAAe,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACIC,IAAMC,SAAS,GADnB,mBAC3BC,EAD2B,KACdC,EADc,KAGlC,OACE,6BACE,0BAAMT,UAAU,iBAAhB,IAAmCK,EAAnC,KACA,yBAAKL,UAAU,SAASC,QAAS,kBAAMQ,EAA6B,EAAdD,KACpD,yBAAKR,UAAYQ,EAAc,gCACC,cADhC,UAEA,yBAAKR,UAAYQ,EAAc,wCACC,kBADhC,cAWRJ,EAAaM,aAAe,CAC1BL,MAAO,WAGMD,QCxBTO,G,cAAO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EACIP,IAAMC,UAAU,GADpB,mBAC7BO,EAD6B,KACfC,EADe,KAGpC,OACI,6BACI,yBAAKf,UAAU,QACTY,EAAKI,KAAK,SAACC,EAAMC,GACf,OAAO,yBAAKlB,UAAYc,IAAeI,EAAQ,iCACA,aACnCjB,QAAU,WAAQY,EAAYK,GACZH,EAAgBG,IAClCC,IAAMD,GAJX,IAIsBD,EAJtB,YAgB3BN,EAAKD,aAAe,CAChBE,KAAM,GACNC,YAAa,SAACK,GAAD,OAAWA,IAGbP,QC1BTS,EAAsB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,eACtCxB,EAAUC,cAiBhB,OACE,6BAASC,UAAU,oBACjB,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBAAf,qBACA,yBAAKA,UAAU,iCACb,kBAAC,EAAD,CACEY,KAAM,CAAC,SAAU,QAAS,gBAC1BC,YAtBU,SAAAK,GAEJ,IAAVA,EACFpB,EAAQyB,KAAK,UAGM,IAAVL,EACTG,IAGmB,IAAVH,GACTI,WAyBNF,EAAoBV,aAAe,CACjCE,KAAM,IAGOQ,Q,kCC/CfI,IAAMC,SAASC,QAAU,yCAEzBF,IAAMC,SAASE,QAAQC,OAAO,gBAAkB,mBAEzC,IAAMC,EAAYL,IAAMM,OAAO,ICJhCC,EAAM,SAACC,GAAD,OAAUH,EAAUE,IAAIC,ICKvBC,EAAkB,SAACC,EAAYC,GAC1C,OAAO,SAACC,GACNA,EAASC,KDHY,SAACH,EAAYC,GAAb,OAA4BJ,EAAI,eAAD,OAAgBG,EAAU,uBAAoBA,GAAe,GAA7D,YAAmEC,EAAU,uBAAoBA,GAAe,KCIpKG,CAAUJ,EAAYC,GACnBI,MAAK,SAACC,GACL,OAAOA,EAAS5B,QAEjB2B,MAAK,SAACE,GACLL,EAASM,EAAiBD,OAE3BE,OAAM,SAACC,GACNR,EAASS,EAAiBD,SAM5BP,EAAmB,iBAAO,CAC9BS,KAFgC,uBAM5BJ,EAAmB,SAACF,GAAD,MAAe,CACtCM,KAFgC,qBAGhCN,SAAUA,IAINK,EAAmB,SAACD,GAAD,MAAY,CACnCE,KAFgC,qBAGhCF,MAAOA,IAIIG,EAAkB,WAC7B,OAAO,SAACX,GACNA,EAASY,KDpCkBjB,EAAI,sBCsC5BQ,MAAK,SAACC,GACL,OAAOA,EAAS5B,QAEjB2B,MAAK,SAACE,GACLL,EAASa,EAAiBR,OAE3BE,OAAM,SAACC,GACNR,EAASc,EAAiBN,SAM5BI,EAAmB,iBAAO,CAC9BF,KAFgC,uBAM5BG,EAAmB,SAACT,GAAD,MAAe,CACtCM,KAFgC,qBAGhCN,SAAUA,IAINU,EAAmB,SAACN,GAAD,MAAY,CACnCE,KAFgC,qBAGhCF,MAAOA,IAKIO,EAAmB,SAACC,GAAD,MAAY,CAC1CN,KAFiC,sBAGjCM,MAAOA,IAIIC,EAAmB,SAACD,GAAD,MAAY,CAC1CN,KAFiC,sBAGjCM,MAAOA,IAIIE,EAAwB,WACnC,OAAO,SAAClB,GACNA,EAASmB,KDlFwBxB,EAAI,sBCoFlCQ,MAAK,SAACC,GACL,OAAOA,EAAS5B,QAEjB2B,MAAK,SAACE,GACLL,EAASoB,EAAuBf,OAEjCE,OAAM,SAACC,GACNR,EAASqB,EAAuBb,SAMlCW,EAAyB,iBAAO,CACpCT,KAFuC,8BAMnCU,EAAyB,SAAChB,GAAD,MAAe,CAC5CM,KAFuC,4BAGvCN,SAAUA,IAINiB,EAAyB,SAACb,GAAD,MAAY,CACzCE,KAFuC,4BAGvCF,MAAOA,ICjHIc,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,cACtCC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,OAAOG,cCF7CC,G,OAAW,SAAC,GAA2B,IAAzBpD,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EACAN,oBAAU,GADV,mBACjCO,EADiC,KACnBC,EADmB,KAGxC,OACI,6BACI,yBAAKf,UAAU,aACTY,EAAKI,KAAK,SAACC,EAAMC,GACf,OAAO,yBAAKlB,UAAYc,IAAeI,EAAQ,2CACA,kBACnCjB,QAAU,WAAQY,EAAYK,GACZH,EAAgBG,IAClCC,IAAMD,GAJX,IAIsBD,EAJtB,YAgB3B+C,EAAStD,aAAe,CACpBE,KAAM,GACNC,YAAa,SAACK,GAAD,OAAWA,IAGb8C,Q,wBC1BTC,EAAY,SAAC,GAA6B,IAA3BrD,EAA0B,EAA1BA,KAAMsD,EAAoB,EAApBA,cACjBC,EAAO,IAAIC,IAAKxD,GAStB,OACI,yBAAKZ,UAAU,UACX,2BAAOA,UAAU,gBACT8C,KAAK,OACLuB,YAAY,SACZC,SAZC,SAAC,GAAuB,IAC/BC,EAD8B,EAApBC,cACYC,MACtBC,EAAUP,EAAKQ,OAAOJ,GACtBK,EAAeL,EAAQG,EAAQ1D,KAAI,SAAAC,GAAI,OAAIA,EAAKA,QAAQL,EAC9DsD,EAAcU,QAkBtBX,EAAUvD,aAAe,CACrBE,KAAM,GACNsD,cAAe,SAAChD,GAAD,OAAWA,IAGf+C,QCoFAY,eAhBS,SAACC,GAKvB,MAAO,CAAEC,eH5GsB,SAAApB,GAAK,OAAIA,EAAMC,OAAOoB,cGwG9BC,CAAkBH,GAIhBI,eH3GM,SAAAvB,GAAK,OAAIA,EAAMC,OAAOuB,cGwG9BC,CAAkBN,GAGA5C,WAFtBwB,EAAcoB,GAEoB3C,WADlC2B,EAAcgB,OAIR,SAAC1C,GAC1B,MAAO,CACLiD,UAAW,kBAAMjD,EAASW,MAC1BI,iBAAkB,SAACC,GAAD,OAAWhB,EAASe,EAAiBC,KACvDC,iBAAkB,SAACD,GAAD,OAAWhB,EAASiB,EAAiBD,QAI5CyB,EAzGK,SAAC,GACuD,IADrDE,EACoD,EADpDA,eAAgBG,EACoC,EADpCA,eAAgBhD,EACoB,EADpBA,WAAYC,EACQ,EADRA,WAC5CkD,EAAoD,EAApDA,UAAWlC,EAAyC,EAAzCA,iBAAkBE,EAAuB,EAAvBA,iBAC5CvD,EAAUC,cADyD,EAE7BQ,mBAAS,GAFoB,mBAElE+E,EAFkE,KAElDC,EAFkD,OAG7BhF,mBAAS,IAHoB,mBAGlEiF,EAHkE,KAGlDC,EAHkD,KAKzEC,qBAAU,WACRL,MACC,IAEH,IAUMM,EAAmB,SAACzE,GACxBiC,EAAiBqC,EAAetE,IAChCqE,EAAkB,IAGdK,EAAmB,SAAC1E,GACxBmC,EAAiBmC,EAAetE,IAChCqE,EAAkB,IAOdM,EAAoB,SAACL,GACzBC,EAAkBD,IA8BpB,OACE,6BAASxF,UAAU,kBACjB,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,uBAAd,gBACA,yBAAKA,UAAU,uBACVC,QA5DgB,WACzBwF,EAAkBV,GAClBQ,EAAkB,KAyDd,IACqCrD,GACsB,gBAE3D,wBAAIlC,UAAU,uBAAd,gBACA,yBAAKA,UAAU,uBACVC,QA5DgB,WACzBwF,EAAkBP,GAClBK,EAAkB,KAyDd,IACqCpD,GACsB,gBAE3D,yBAAKnC,UAAU,gCAAgCC,QAAS,WA/C5DH,EAAQyB,KAAK,YA+CT,aAxCa,WACjB,OAAQ+D,GACN,KAAK,EACH,OAAO,8BACT,KAAK,EACH,OACE,yBAAKtF,UAAU,sBACb,yBAAKA,UAAU,+BACb,kBAAC,EAAD,CAAWY,KAAMmE,EAAgBb,cAAe2B,IAChD,kBAAC,EAAD,CAAUjF,KAAM4E,EAAgB3E,YAAa8E,MAIrD,KAAK,EACH,OACE,yBAAK3F,UAAU,sBACb,yBAAKA,UAAU,+BACb,kBAAC,EAAD,CAAWY,KAAMsE,EAAgBhB,cAAe2B,IAChD,kBAAC,EAAD,CAAUjF,KAAM4E,EAAgB3E,YAAa+E,MAIrD,QACE,OAAO,+BAsBRE,OCjDQjB,G,OAAAA,aAbS,SAAAC,GAEpB,MAAO,CAAEiB,gBJzBqB,SAAApC,GAAK,OAAIA,EAAMC,OAAOoC,cIwB5BC,CAAmBnB,OAIpB,SAAA1C,GACzB,MAAO,CACL8D,gBAAiB,kBAAM9D,EAASkB,MAChCH,iBAAkB,SAACC,GAAD,OAAWhB,EAASe,EAAiBC,KACvDC,iBAAkB,SAACD,GAAD,OAAWhB,EAASiB,EAAiBD,QAI5CyB,EAxCW,SAAC,GAA8E,IAA5EkB,EAA2E,EAA3EA,gBAAiBG,EAA0D,EAA1DA,gBAAiB/C,EAAyC,EAAzCA,iBAAkBE,EAAuB,EAAvBA,iBACzEvD,EAAUC,cAEhB2F,qBAAU,WACRQ,MACC,IAUH,OACE,6BAASlG,UAAU,kBACjB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CAAMY,KAAOmF,EAAgB/E,KAAK,SAAAoC,GAAK,gBAAQA,EAAM+C,KAAd,cAAyB/C,EAAMgD,UAChEvF,YAbQ,SAACK,GACrB,IAAMmF,EAAqBN,EAAgB7E,GAAO2C,aAC5CyC,EAAqBP,EAAgB7E,GAAO6C,aAClDZ,EAAiBkD,GACjBhD,EAAiBiD,GACjBxG,EAAQyB,KAAK,oBCuCFsD,eAPS,SAAAC,GAEtB,MAAO,CAAEyB,aLtCoB,SAAA5C,GAAK,OAAIA,EAAM6C,UAAUC,OKqCjCC,CAAgB5B,MAIZ,KAEZD,EAnDK,WAAO,IAAD,EACsBtE,mBAAS,GAD/B,mBACjBoG,EADiB,KACAC,EADA,KAgBxB,OACE,6BAAS5G,UAAU,mBACjB,wBAAIA,UAAU,eAAd,+CAC8C,6BAD9C,qGAIA,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CAAcK,MAAM,YAEtB,yBAAKL,UAAU,yBACb,kBAAC,EAAD,CAAcK,MAAM,cAK1B,kBAAC,EAAD,CACEgB,cAAe,kBAAMuF,EAAmB,IACxCtF,eAAgB,kBAAMsF,EAAmB,MAhC3B,WAClB,OAAQD,GACN,KAAK,EACH,OAAO,8BACT,KAAK,EACH,OAAO,kBAAC,EAAD,MACT,KAAK,EACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,+BA0BRE,O,sCC3CDC,I,cAAe,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,WAAYC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAAmB,EAC1C5G,IAAMC,SAAS2G,GAD2B,mBACzEC,EADyE,KAC5DC,EAD4D,KAGhF,OACE,yBAAKpH,UAAU,iBACX+G,EADJ,UAEE,yBAAK/G,UAAU,sBACbC,QAAU,kBAAMmH,EAA6B,EAAdD,KAC/B,yBAAKnH,UAAWmH,EAAc,+DACA,4GAD9B,IAC6IH,EAD7I,KAEA,yBAAKhH,UAAWmH,EAAc,8DACA,0GAD9B,IAC2IF,EAD3I,SAcRH,GAAapG,aAAe,CAC1BqG,WAAY,QACZC,aAAc,UACdC,YAAa,SACbC,aAAc,GAGDJ,UCeAO,I,OA/CD,WAAO,IAAD,EACwB/G,IAAMC,SAAS,MADvC,mBACX+G,EADW,KACIC,EADJ,OAEoBjH,IAAMC,SAAS,GAFnC,mBAEXiH,EAFW,KAEEC,EAFF,KAalB,OATA/B,qBAAU,WACR,GAAI8B,EAAa,CACf,IAAME,EAAQC,YAAW,WACvBJ,EAAiBD,EAAgB,KAChC,KACH,OAAO,kBAAMM,aAAaF,QAK5B,6BACE,yBAAK1H,UAAU,SACb,yBAAKA,UAAU,kBAAf,OAEOsH,EAAgB,MAFvB,KAEgC,OAC1BA,EAAgB,IAAiC,MAAxBA,EAAgB,MAH/C,KAG6D,IAKpC,IAHrBA,EAC2D,OAAvDA,EAAgB,IAAiC,MAAxBA,EAAgB,OAClB,QAAxBA,EAAgB,OACnBO,WAAWC,OACT,IACA,GACHR,EAC4D,OAAvDA,EAAgB,IAAiC,MAAxBA,EAAgB,OAClB,QAAxBA,EAAgB,OAEvB,yBAAKtH,UAAU,kBACb,yBAAKA,UAAU,cAAcC,QAAS,kBAAMwH,EAAe,KAA3D,SAGA,yBAAKzH,UAAU,cAAcC,QAAS,kBAAMwH,EAAe,KAA3D,QAGA,yBAAKzH,UAAU,cAAcC,QAAS,kBAAMsH,EAAiB,QAA7D,cCqEJQ,G,uKAEF,IAAM7F,EAAa8F,KAAKC,MAAM/F,WACxBC,EAAa6F,KAAKC,MAAM9F,WACxB+F,EAAcF,KAAKC,MAAMC,YACzBC,EAAcH,KAAKC,MAAME,YAE/B,OACE,yBAAKnI,UAAU,SACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,iBACZ,kBAAC,GAAD,CACE+G,WAAW,SACXC,aAAc9E,EACd+E,YAAY,GACZC,aAAc,KAGlB,wBAAIlH,UAAU,gBACXkI,EAAYlH,KAAI,SAACoH,EAAOlH,GAAR,OACf,wBAAIlB,UAAU,gBACZ,2BACGkB,EAAQ,EADX,KACgBkH,QAMtB,wBAAIpI,UAAU,iBACZ,kBAAC,GAAD,CACE+G,WAAW,SACXC,aAAc7E,EACd8E,YAAY,GACZC,aAAc,KAGlB,wBAAIlH,UAAU,gBACXmI,EAAYnH,KAAI,SAACoH,EAAOlH,GAAR,OACf,wBAAIlB,UAAU,gBACZ,2BACGkB,EAAQ,EADX,KACgBkH,c,GAxCD9H,IAAM+H,WAkEtBxD,gBAfS,SAACC,GAKvB,MAAO,CAAE5C,WAJUwB,EAAcoB,GAIZ3C,WAHF2B,EAAcgB,GAGAoD,YR7JL,SAAAvE,GAAK,OAAIA,EAAMC,OAAO0E,cQ2J9BC,CAAezD,GAEWqD,YR5JlB,SAAAxE,GAAK,OAAIA,EAAMC,OAAO4E,cQ2J9BC,CAAe3D,OAIV,SAAC1C,GAC1B,MAAO,CACLE,UAAW,SAACJ,EAAYC,GAAb,OACTC,EAASH,EAAgBC,EAAYC,QAI5B0C,EAnKG,SAAC,GACmB,IADjB3C,EACgB,EADhBA,WAAYC,EACI,EADJA,WAAY+F,EACR,EADQA,YAAaC,EACrB,EADqBA,YACrC7F,EAAgB,EAAhBA,UACboG,EAAeC,mBACfC,EAAcC,2BAAgB,CAClCC,QAAS,kBAAMJ,EAAaK,WAG9BrD,qBAAU,WAEJxD,GAAcC,EAChBG,EAAUJ,EAAYC,GAItBG,MAED,IAaH,OACE,6BAAStC,UAAU,kBACjB,yBAAKA,UAAU,mBACb,kBAAC,GAAD,CACEkC,WAAYA,EACZC,WAAYA,EACZ+F,YAAaA,EACbC,YAAaA,EACba,IAAKN,KAGT,6BACE,kBAAC,GAAD,MACA,yBAAK1I,UAAU,aACb,yBAAKA,UAAU,wBACb,yBACEA,UAAU,oBACVC,QAAS,kBA5BK,WACxB,IAAMgJ,EAAU,qBACT/G,EADS,aAElBgG,EAAYlH,KAAI,SAACoH,EAAOlH,GAAR,gBAAqBA,EAAQ,EAA7B,aAAmCkH,EAAnC,SAFE,wBAITlG,EAJS,aAKlBiG,EAAYnH,KAAI,SAACoH,EAAOlH,GAAR,gBAAqBA,EAAQ,EAA7B,aAAmCkH,EAAnC,SALE,cAOhBc,UAAUC,UAAUC,UAAUH,GAoBLI,KAFjB,qBAMA,yBAAKrJ,UAAU,oBAAoBC,QAAS2I,GAA5C,WAKJ,yBAAK5I,UAAU,UACb,wBAAIA,UAAU,iBACZ,kBAAC,GAAD,CACE+G,WAAW,SACXC,aAAa,eACbC,YAAa/E,EACbgF,aAAc,KAGlB,wBAAIlH,UAAU,gBACXkI,EAAYlH,KAAI,SAACoH,EAAOlH,GAAR,OACf,wBAAIlB,UAAU,gBACZ,2BACGkB,EAAQ,EADX,KACgBkH,QAMtB,wBAAIpI,UAAU,iBACZ,kBAAC,GAAD,CACE+G,WAAW,SACXC,aAAa,eACbC,YAAa9E,EACb+E,aAAc,KAGlB,wBAAIlH,UAAU,gBACXmI,EAAYnH,KAAI,SAACoH,EAAOlH,GAAR,OACf,wBAAIlB,UAAU,gBACZ,2BACGkB,EAAQ,EADX,KACgBkH,cC9EjBkB,OAbf,WACI,OACI,kBAAC,IAAD,CAAQxJ,QAAUA,GACd,kBAAC,EAAD,MACA,6BACI,kBAAC,IAAD,CAAOkC,KAAK,IAAIuH,OAAK,EAACC,UAAYC,IAClC,kBAAC,IAAD,CAAOzH,KAAK,SAASwH,UAAYE,MAErC,kBAAC,EAAD,QCJQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCTA7C,GAAe,CACnBtD,QAAQ,EACR6C,QAAQ,GCFJS,GAAe,CAEnBrD,aAAc,KACdyE,cAAe,GACfvE,aAAc,KACdyE,cAAe,GAGfxD,cAAe,GACfG,cAAe,GAGfa,cAAe,ICjBFgE,8BAAgB,CAAExD,UFUlB,WAAyC,IAA/B1B,EAA8B,uDAAtBoC,GAAc+C,EAAQ,uCACrD,OAAQA,EAAOnH,MAEb,IZM8B,qBYL5B,OAAO,6BACFgC,GADL,IAEElB,QAAQ,IAGZ,IZK8B,qBYC9B,IZK8B,qBYJ5B,OAAO,6BACFkB,GADL,IAEElB,QAAQ,IAKZ,IZoB8B,qBYnB5B,OAAO,6BACFkB,GADL,IAEE2B,QAAQ,IAGZ,IZmB8B,qBYb9B,IZmB8B,qBYlB5B,OAAO,6BACF3B,GADL,IAEE2B,QAAQ,IAIZ,QACE,OAAO3B,IErD+BlB,ODoB7B,WAAyC,IAA/BkB,EAA8B,uDAAtBoC,GAAc+C,EAAQ,uCACrD,OAAQA,EAAOnH,MACb,IbE8B,qBaD5B,IAAMN,EAAWyH,EAAOzH,SACxB,OAAO,6BACFsC,GADL,IAEEjB,aAAcrB,EAAS8F,cAAc,GAAG7B,OAAO,GAAGrD,MAClDkF,cAAe9F,EAAS8F,cAActH,KAAI,SAACoH,GAAD,OAAWA,EAAM8B,QAC3DnG,aAAcvB,EAASgG,cAAc,GAAG/B,OAAO,GAAGrD,MAClDoF,cAAehG,EAASgG,cAAcxH,KAAI,SAACoH,GAAD,OAAWA,EAAM8B,UAG/D,IbqB8B,qBapB5B,OAAO,6BACFpF,GADL,IAEEjB,aAAc,KACdE,aAAc,OAGlB,IbmB8B,qBalB5B,IAAMvB,EAAWyH,EAAOzH,SACxB,OAAO,6BACFsC,GADL,IAEEE,cAAexC,EAASwC,cACxBG,cAAe3C,EAAS2C,gBAG5B,IbwB+B,sBavB7B,IAAM/B,EAAQ6G,EAAO7G,MACrB,OAAO,6BACF0B,GADL,IAEEjB,aAAcT,IAGlB,IbuB+B,sBatB7B,IAAMA,EAAQ6G,EAAO7G,MACrB,OAAO,6BACF0B,GADL,IAEEf,aAAcX,IAGlB,Ib4CqC,4Ba3CnC,IAAMZ,EAAWyH,EAAOzH,SACxB,OAAO,6BACFsC,GADL,IAEEkB,cAAexD,IAGnB,QACE,OAAOsC,M,kBEpEPqF,GAAqBC,2BAAgBC,MACrCC,GAAoBC,+BAAqBJ,IAEhCK,0BAAYC,GAAaH,ICAxCI,IAASC,OACP,kBAAC,IAAD,CAAUhH,MAAOA,IACf,kBAAC,IAAMiH,WAAP,KACE,kBAAC,GAAD,QAGJC,SAASC,eAAe,SLqHpB,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MACrBzI,MAAK,SAAA0I,GACJA,EAAaC,gBAEdvI,OAAM,SAAAC,GACLuI,QAAQvI,MAAMA,EAAMwI,a","file":"static/js/main.b784720a.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from \"react\";\r\nimport \"./Header.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\nfunction Header() {\r\n  const history = useHistory();\r\n\r\n  const test = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <nav className=\"navigation\">\r\n        <div className=\"navigation__back-button\" onClick={test}>\r\n          <ArrowBackIcon />\r\n        </div>\r\n      </nav>\r\n\r\n      <h1 className=\"header__title\">\r\n        GAMSAT Section II <br /> Quote Generator\r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            &nbsp;\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ToggleButton.scss';\r\n\r\nconst ToggleButton = ({ label }) => {\r\n  const [toggleState, setToggleState] = React.useState(1);\r\n\r\n  return (\r\n    <div>\r\n      <span className=\"toggle__label\"> { label } </span>\r\n      <div className=\"toggle\" onClick={() => setToggleState(toggleState ^ 1)}>\r\n        <div className={ toggleState ? \"toggle__bg toggle__bg--active\"\r\n                                      : \"toggle__bg\"}> &nbsp; </div>\r\n        <div className={ toggleState ? \"toggle__circle toggle__circle--active\"\r\n                                      : \"toggle__circle\"}> &nbsp; </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nToggleButton.propTypes = {\r\n  label: PropTypes.string,\r\n}\r\n  \r\nToggleButton.defaultProps = {\r\n  label: \"default\",\r\n}\r\n\r\nexport default ToggleButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './List.scss';\n\nconst List = ({ data, onItemClick }) => {\n    const [clickedState, setClickedState] = React.useState(-1);\n\n    return (\n        <div>\n            <div className=\"list\">\n                { data.map( (item, index) => {\n                    return <div className={ clickedState===index ? \"list__item list__item--clicked\"\n                                                                 : \"list__item\" }\n                                onClick={ () => { onItemClick(index);\n                                                  setClickedState(index); }}\n                                key={ index }> { item } </div>\n                })}\n            </div>\n        </div>\n    );\n}\n\nList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.string),\n    onItemClick: PropTypes.func\n}\n  \nList.defaultProps = {\n    data: [],\n    onItemClick: (index) => index\n}\n\nexport default List;\n\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./GenerationSelection.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport List from \"../../../../Components/List/List\";\r\n\r\nconst GenerationSelection = ({ onThemeButton, onGamsatButton }) => {\r\n  const history = useHistory();\r\n\r\n  const onItemClick = index => {\r\n    // random button clicked\r\n    if (index === 0) {\r\n      history.push(\"/quote\");\r\n\r\n      // theme button clicked\r\n    } else if (index === 1) {\r\n      onThemeButton();\r\n\r\n      // gamsat button clicked\r\n    } else if (index === 2) {\r\n      onGamsatButton();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"generate-section\">\r\n      <div className=\"generate\">\r\n        <div className=\"generate__title\"> Generate Quotes </div>\r\n        <div className=\"generate__selection-container\">\r\n          <List\r\n            data={[\"Random\", \"Theme\", \"Past GAMSAT \"]}\r\n            onItemClick={onItemClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nGenerationSelection.propTypes = {\r\n  onThemeButton: PropTypes.func,\r\n  onGamsatButton: PropTypes.func,\r\n};\r\n\r\n// todo: delete unsued defaultProps\r\nGenerationSelection.defaultProps = {\r\n  data: [],\r\n};\r\n\r\nexport default GenerationSelection;\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = \"https://d3bn8hft5v4bch.cloudfront.net/\";\r\n\r\naxios.defaults.headers.common['Content-Type'] = 'application/json';\r\n\r\nexport const APIClient = axios.create({});","import { APIClient } from './apiClient';\r\n\r\nconst get = (path) => APIClient.get(path);\r\nconst post = (path, data = {}) => APIClient.post(path, data);\r\nconst patch = (path, data = {}) => APIClient.patch(path, data);\r\n\r\nexport const getQuotes = (taskATheme, taskBTheme) => get(`/api/quotes?${taskATheme ? `task_a_theme=${ taskATheme }`: \"\"}&${taskBTheme ? `task_b_theme=${ taskBTheme }`: \"\"}`);\r\nexport const getThemes = () => get(`/api/quotes/themes`);\r\nexport const getGamsatThemes = () => get(`/api/quotes/gamsat`);\r\n","import {\r\n  getQuotes,\r\n  getThemes,\r\n  getGamsatThemes,\r\n} from \"../Services/quotesService\";\r\n\r\n// QUOTES\r\nexport const getQuotesAction = (taskATheme, taskBTheme) => {\r\n  return (dispatch) => {\r\n    dispatch(getQuotesRequest());\r\n    getQuotes(taskATheme, taskBTheme)\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .then((responseData) => {\r\n        dispatch(getQuotesSuccess(responseData));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(getQuotesFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const GET_QUOTES_REQUEST = \"GET_QUOTES_REQUEST\";\r\nconst getQuotesRequest = () => ({\r\n  type: GET_QUOTES_REQUEST,\r\n});\r\n\r\nexport const GET_QUOTES_SUCCESS = \"GET_QUOTES_SUCCESS\";\r\nconst getQuotesSuccess = (response) => ({\r\n  type: GET_QUOTES_SUCCESS,\r\n  response: response,\r\n});\r\n\r\nexport const GET_QUOTES_FAILURE = \"GET_QUOTES_FAILURE\";\r\nconst getQuotesFailure = (error) => ({\r\n  type: GET_QUOTES_FAILURE,\r\n  error: error,\r\n});\r\n\r\n// THEMES\r\nexport const getThemesAction = () => {\r\n  return (dispatch) => {\r\n    dispatch(getThemesRequest());\r\n    getThemes()\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .then((responseData) => {\r\n        dispatch(getThemesSuccess(responseData));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(getThemesFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const GET_THEMES_REQUEST = \"GET_THEMES_REQUEST\";\r\nconst getThemesRequest = () => ({\r\n  type: GET_THEMES_REQUEST,\r\n});\r\n\r\nexport const GET_THEMES_SUCCESS = \"GET_THEMES_SUCCESS\";\r\nconst getThemesSuccess = (response) => ({\r\n  type: GET_THEMES_SUCCESS,\r\n  response: response,\r\n});\r\n\r\nexport const GET_THEMES_FAILURE = \"GET_THEMES_FAILURE\";\r\nconst getThemesFailure = (error) => ({\r\n  type: GET_THEMES_FAILURE,\r\n  error: error,\r\n});\r\n\r\n// SELECTING THEME\r\nexport const SELECT_TASK_A_THEME = \"SELECT_TASK_A_THEME\";\r\nexport const selectTaskATheme = (theme) => ({\r\n  type: SELECT_TASK_A_THEME,\r\n  theme: theme,\r\n});\r\n\r\nexport const SELECT_TASK_B_THEME = \"SELECT_TASK_B_THEME\";\r\nexport const selectTaskBTheme = (theme) => ({\r\n  type: SELECT_TASK_B_THEME,\r\n  theme: theme,\r\n});\r\n\r\n// Gamsat Themes\r\nexport const getGamsatThemesAction = () => {\r\n  return (dispatch) => {\r\n    dispatch(getGamsatThemesRequest());\r\n    getGamsatThemes()\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .then((responseData) => {\r\n        dispatch(getGamsatThemesSuccess(responseData));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(getGamsatThemesFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const GET_GAMSAT_THEMES_REQUEST = \"GET_GAMSAT_THEMES_REQUEST\";\r\nconst getGamsatThemesRequest = () => ({\r\n  type: GET_GAMSAT_THEMES_REQUEST,\r\n});\r\n\r\nexport const GET_GAMSAT_THEMES_SUCCESS = \"GET_GAMSAT_THEMES_SUCCESS\";\r\nconst getGamsatThemesSuccess = (response) => ({\r\n  type: GET_GAMSAT_THEMES_SUCCESS,\r\n  response: response,\r\n});\r\n\r\nexport const GET_GAMSAT_THEMES_FAILURE = \"GET_GAMSAT_THEMES_FAILURE\";\r\nconst getGamsatThemesFailure = (error) => ({\r\n  type: GET_GAMSAT_THEMES_FAILURE,\r\n  error: error,\r\n});\r\n","// All Themes\r\nexport const getAllTaskAThemes = store => store.quotes.task_a_themes;\r\nexport const getAllTaskBThemes = store => store.quotes.task_b_themes;\r\n\r\n// Themes\r\nexport const getTaskATheme = store => store.quotes.task_a_theme;\r\nexport const getTaskBTheme = store => store.quotes.task_b_theme;\r\n\r\n// Generated Quotes\r\nexport const getTaskAQuotes = store => store.quotes.task_a_quotes;\r\nexport const getTaskBQuotes = store => store.quotes.task_b_quotes;\r\n\r\n// Gamsat Themes\r\nexport const getAllGamsatThemes = store => store.quotes.gamsat_themes;\r\n\r\n// isLoading\r\nexport const getQuoteLoading = store => store.isLoading.quotes;\r\nexport const getThemeLoading = store => store.isLoading.themes;","import React, {useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport './PillList.scss';\n\nconst PillList = ({ data, onItemClick }) => {\n    const [clickedState, setClickedState] = useState(-1);\n    \n    return (\n        <div>\n            <div className=\"pill-list\">\n                { data.map( (item, index) => {\n                    return <div className={ clickedState===index ? \"pill-list__item pill-list__item--clicked\"\n                                                                 : \"pill-list__item\" }\n                                onClick={ () => { onItemClick(index);\n                                                  setClickedState(index); }}\n                                key={ index }> { item } </div>\n                })}\n            </div>\n        </div>\n    );\n}\n\nPillList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.string),\n    onItemClick: PropTypes.func\n}\n  \nPillList.defaultProps = {\n    data: [],\n    onItemClick: (index) => index\n}\n\nexport default PillList;\n\n","import React, {useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchBar.scss';\nimport FuzzySearch from \"react-fuzzy\";\nimport Fuse from 'fuse.js'\n\nconst SearchBar = ({ data, onInputChange }) => {\n    const fuse = new Fuse(data);\n\n    const onSearch = ({ currentTarget }) => {\n        const query = currentTarget.value;\n        const results = fuse.search(query);\n        const filteredData = query ? results.map(item => item.item) : data;\n        onInputChange(filteredData);\n    }\n\n    return (\n        <div className=\"search\">\n            <input className=\"search__input\"\n                    type=\"text\"\n                    placeholder=\"search\"\n                    onChange={onSearch} />\n        </div>\n    );\n}\n\nSearchBar.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.string),\n    onInputChange: PropTypes.func\n}\n  \nSearchBar.defaultProps = {\n    data: [],\n    onInputChange: (index) => index\n}\n\nexport default SearchBar;\n\n","import React,  { useState, useCallback } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./SelectTheme.scss\";\r\nimport { getThemesAction,\r\n\t\t\t\t selectTaskATheme,\r\n\t\t\t\t selectTaskBTheme } from \"../../../../Redux/actions\";\r\nimport { getAllTaskAThemes,\r\n         getAllTaskBThemes,\r\n         getTaskATheme,\r\n         getTaskBTheme } from \"../../../../Redux/selectors\";\r\nimport { useEffect } from \"react\";\r\nimport PillList from \"../../../../Components/PillList/PillList\";\r\nimport SearchBar from \"../../../../Components/SearchBar/SearchBar\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst SelectTheme = ({ allTaskAThemes, allTaskBThemes, taskATheme, taskBTheme,\r\n                       getThemes, selectTaskATheme, selectTaskBTheme }) => {\r\n  const history = useHistory();\r\n  const [taskModalState, setTaskModalState] = useState(0);\r\n  const [filteredThemes, setFilteredThemes] = useState([])\r\n\r\n  useEffect(() => {\r\n    getThemes();\r\n  }, []);\r\n\r\n  const onSelectTaskATheme = () => {\r\n    setFilteredThemes(allTaskAThemes)\r\n    setTaskModalState(1)\r\n  }\r\n\r\n  const onSelectTaskBTheme = () => {\r\n    setFilteredThemes(allTaskBThemes)\r\n    setTaskModalState(2)\r\n  }\r\n\r\n  const onTaskAItemClick = (index) => {\r\n    selectTaskATheme(filteredThemes[index]);\r\n    setTaskModalState(0);\r\n  };\r\n\r\n  const onTaskBItemClick = (index) => {\r\n    selectTaskBTheme(filteredThemes[index]);\r\n    setTaskModalState(0);\r\n  };\r\n\r\n  const onGenerate = () => {\r\n    history.push(\"/quote\");\r\n  };\r\n\r\n  const getFilteredThemes = (filteredThemes) => {\r\n    setFilteredThemes(filteredThemes)\r\n  }\r\n\r\n  const themeModal = () => {\r\n    switch (taskModalState) {\r\n      case 0:\r\n        return <div />;\r\n      case 1:\r\n        return (\r\n          <div className=\"select-theme-modal\">\r\n            <div className=\"select-theme-modal__content\">\r\n              <SearchBar data={allTaskAThemes} onInputChange={getFilteredThemes}/>\r\n              <PillList data={filteredThemes} onItemClick={onTaskAItemClick}/>\r\n            </div>\r\n          </div>\r\n        )\r\n      case 2:\r\n        return (\r\n          <div className=\"select-theme-modal\">\r\n            <div className=\"select-theme-modal__content\">\r\n              <SearchBar data={allTaskBThemes} onInputChange={getFilteredThemes}/>\r\n              <PillList data={filteredThemes} onItemClick={onTaskBItemClick}/>\r\n            </div>\r\n          </div>\r\n        )\r\n      default:\r\n        return <div />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"themes-section\">\r\n      <div className=\"select-theme\">\r\n        <h2 className=\"select-theme__title\">Task A Theme</h2>\r\n        <div className=\"select-theme__button\"\r\n             onClick={onSelectTaskATheme}> { taskATheme ? taskATheme \r\n                                                                 : \"Select Theme\" }\r\n        </div>\r\n        <h2 className=\"select-theme__title\">Task B Theme</h2>\r\n        <div className=\"select-theme__button\"\r\n             onClick={onSelectTaskBTheme}> { taskBTheme ? taskBTheme \r\n                                                                 : \"Select Theme\" }\r\n        </div>\r\n        <div className=\"select-theme__generate-button\" onClick={() => onGenerate()}>\r\n          Generate\r\n        </div>\r\n      </div>\r\n\r\n      {themeModal()}\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const allTaskAThemes = getAllTaskAThemes(state);\r\n  const allTaskBThemes = getAllTaskBThemes(state);\r\n  const taskATheme = getTaskATheme(state);\r\n  const taskBTheme = getTaskBTheme(state);\r\n  return { allTaskAThemes, allTaskBThemes, taskATheme, taskBTheme };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getThemes: () => dispatch(getThemesAction()),\r\n    selectTaskATheme: (theme) => dispatch(selectTaskATheme(theme)),\r\n    selectTaskBTheme: (theme) => dispatch(selectTaskBTheme(theme)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectTheme);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './SelectGamsatTheme.scss';\r\nimport { useEffect } from 'react';\r\nimport { getGamsatThemesAction, selectTaskATheme, selectTaskBTheme } from '../../../../Redux/actions'\r\nimport { getAllGamsatThemes } from '../../../../Redux/selectors';\r\nimport List from '../../../../Components/List/List';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst SelectGamsatTheme = ({ allGamsatThemes, getGamsatThemes, selectTaskATheme, selectTaskBTheme }) => {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getGamsatThemes();\r\n  }, []);\r\n\r\n  const onGamsatClick = (index) => {\r\n    const selectedTaskATheme = allGamsatThemes[index].task_a_theme;\r\n    const selectedTaskBTheme = allGamsatThemes[index].task_b_theme;\r\n    selectTaskATheme(selectedTaskATheme);\r\n    selectTaskBTheme(selectedTaskBTheme);\r\n    history.push(\"/quote\");\r\n  }\r\n\r\n  return (\r\n    <section className=\"gamsat-section\">\r\n      <div className=\"gamsat\">\r\n        <div className=\"gamsat__container\">\r\n          <List data={ allGamsatThemes.map( theme => `${ theme.year } - ${theme.month}` ) }\r\n                onItemClick={ onGamsatClick }/>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const allGamsatThemes = getAllGamsatThemes(state);\r\n    return { allGamsatThemes }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getGamsatThemes: () => dispatch(getGamsatThemesAction()),\r\n    selectTaskATheme: (theme) => dispatch(selectTaskATheme(theme)),\r\n    selectTaskBTheme: (theme) => dispatch(selectTaskBTheme(theme))\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectGamsatTheme);\r\n","import React, {useState} from 'react';\r\nimport \"./LandingPage.scss\";\r\nimport Togglebutton from \"../../Components/ToggleButton/ToggleButton\";\r\nimport GenerationSelection from \"./Components/GenerationSelection/GenerationSelection\";\r\nimport SelectTheme from \"./Components/SelectTheme/SelectTheme\";\r\nimport SelectGamsatTheme from \"./Components/SelectGamsatTheme/SelectGamsatTheme\";\r\nimport { connect } from \"react-redux\";\r\nimport { getThemeLoading } from \"../../Redux/selectors\";\r\n\r\nconst LandingPage = () => {\r\n  const [generationState, setGenerationState] = useState(0);\r\n\r\n  const renderTheme = () => {\r\n    switch (generationState) {\r\n      case 0:\r\n        return <div />;\r\n      case 1:\r\n        return <SelectTheme />;\r\n      case 2:\r\n        return <SelectGamsatTheme />;\r\n      default:\r\n        return <div />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"landing-section\">\r\n      <h2 className=\"description\">\r\n        Welcome to our Free GAMSAT Quote Generator. <br />\r\n        To begin please select the tasks you want to write on and then click on the method of generation.\r\n      </h2>\r\n      <div className=\"toggle-button\">\r\n        <div className=\"toggle-button__container\">\r\n          <div className=\"toggle-button__button\">\r\n            <Togglebutton label=\"TASK A\" />\r\n          </div>\r\n          <div className=\"toggle-button__button\">\r\n            <Togglebutton label=\"TASK B\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <GenerationSelection\r\n        onThemeButton={() => setGenerationState(1)}\r\n        onGamsatButton={() => setGenerationState(2)}\r\n      />\r\n\r\n      {renderTheme()}\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const themeLoading = getThemeLoading(state);\r\n  return { themeLoading };\r\n};\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LandingPage);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './HiddenButton.scss';\r\n\r\nconst HiddenButton = ({ titleLabel, visibleLabel, hiddenLabel, initialState }) => {\r\n  const [hiddenState, setHiddenState] = React.useState(initialState);\r\n\r\n  return (\r\n    <div className=\"hidden-button\">\r\n      { titleLabel } - &nbsp;\r\n      <div className=\"hidden-button__card\"\r\n        onClick={ () => setHiddenState(hiddenState ^ 1) }>\r\n        <div className={hiddenState ? \"hidden-button__card__item hidden-button__card__item__visible\"\r\n                                    : \"hidden-button__card__item hidden-button__card__item__visible hidden-button__card__item__visible--clicked\"}> { visibleLabel } </div>\r\n        <div className={hiddenState ? \"hidden-button__card__item hidden-button__card__item__hidden\"\r\n                                    : \"hidden-button__card__item hidden-button__card__item__hidden hidden-button__card__item__hidden--clicked\"}> { hiddenLabel } </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nHiddenButton.propTypes = {\r\n  titleLabel: PropTypes.string,\r\n  visibleLabel: PropTypes.string,\r\n  hiddenLabel: PropTypes.string,\r\n  initialState: PropTypes.number\r\n}\r\n  \r\nHiddenButton.defaultProps = {\r\n  titleLabel: \"title\", \r\n  visibleLabel: \"visible\",\r\n  hiddenLabel: \"hidden\",\r\n  initialState: 1\r\n}\r\n\r\nexport default HiddenButton;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./Timer.scss\";\r\n\r\nconst Timer = () => {\r\n  const [timeRemaining, setTimeRemaining] = React.useState(5400);\r\n  const [timerActive, setTimerActive] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    if (timerActive) {\r\n      const timer = setTimeout(() => {\r\n        setTimeRemaining(timeRemaining - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"timer\">\r\n        <div className=\"timer__display\">\r\n          {/* decouple the following code to a function is better for readabilty */}\r\n          0{~~(timeRemaining / 3600)} :{\" \"}\r\n          {~~(timeRemaining / 60) - ~~(timeRemaining / 3600) * 60} :{\" \"}\r\n          {(\r\n            timeRemaining -\r\n            (~~(timeRemaining / 60) - ~~(timeRemaining / 3600) * 60) * 60 -\r\n            ~~(timeRemaining / 3600) * 3600\r\n          ).toString().length != 2\r\n            ? \"0\"\r\n            : \"\"}\r\n          {timeRemaining -\r\n            (~~(timeRemaining / 60) - ~~(timeRemaining / 3600) * 60) * 60 -\r\n            ~~(timeRemaining / 3600) * 3600}\r\n        </div>\r\n        <div className=\"timer__control\">\r\n          <div className=\"timer__item\" onClick={() => setTimerActive(1)}>\r\n            start\r\n          </div>\r\n          <div className=\"timer__item\" onClick={() => setTimerActive(0)}>\r\n            stop\r\n          </div>\r\n          <div className=\"timer__item\" onClick={() => setTimeRemaining(5400)}>\r\n            reset\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React, { useRef } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./QuotePage.scss\";\r\nimport { getQuotesAction } from \"../../Redux/actions\";\r\nimport { useEffect } from \"react\";\r\nimport { getTaskATheme,\r\n         getTaskBTheme,\r\n         getTaskAQuotes,\r\n         getTaskBQuotes } from \"../../Redux/selectors\";\r\nimport HiddenButton from \"../../Components/HiddenButton/HiddenButton\";\r\nimport Timer from \"../../Components/Timer/Timer\";\r\n\r\nconst QuotePage = ({ taskATheme, taskBTheme, taskAQuotes, taskBQuotes,\r\n                     getQuotes }) => {\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // task was selected: generate by theme\r\n    if (taskATheme || taskBTheme) {\r\n      getQuotes(taskATheme, taskBTheme);\r\n\r\n    // no task was selected: generate randomly\r\n    } else {\r\n      getQuotes();\r\n    }\r\n  }, []);\r\n\r\n  const onCopyToClipboard = () => {\r\n    const copiedText = `\r\nTask A - ${taskATheme}\r\n${taskAQuotes.map((quote, index) => `${index + 1}. ${quote}\\n`)}\r\n\r\nTask B - ${taskATheme}\r\n${taskBQuotes.map((quote, index) => `${index + 1}. ${quote}\\n`)}\r\n        `;\r\n    navigator.clipboard.writeText(copiedText);\r\n  };\r\n\r\n  return (\r\n    <section className=\"quotes-section\">\r\n      <div className=\"print-component\">\r\n        <ComponentToPrint\r\n          taskATheme={taskATheme}\r\n          taskBTheme={taskBTheme}\r\n          taskAQuotes={taskAQuotes}\r\n          taskBQuotes={taskBQuotes}\r\n          ref={componentRef}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Timer />\r\n        <div className=\"utilities\">\r\n          <div className=\"utilities__container\">\r\n            <div\r\n              className=\"utilities__button\"\r\n              onClick={() => onCopyToClipboard()}\r\n            >\r\n              Copy To Clipboard\r\n            </div>\r\n            <div className=\"utilities__button\" onClick={handlePrint}>\r\n              Print\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"quotes\">\r\n          <h2 className=\"quotes__title\">\r\n            <HiddenButton\r\n              titleLabel=\"Task A\"\r\n              visibleLabel=\"Reveal Theme\"\r\n              hiddenLabel={taskATheme}\r\n              initialState={1}\r\n            />\r\n          </h2>\r\n          <ul className=\"quotes__list\">\r\n            {taskAQuotes.map((quote, index) => (\r\n              <li className=\"quotes__item\">\r\n                <p>\r\n                  {index + 1}. {quote}\r\n                </p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <h2 className=\"quotes__title\">\r\n            <HiddenButton\r\n              titleLabel=\"Task B\"\r\n              visibleLabel=\"Reveal Theme\"\r\n              hiddenLabel={taskBTheme}\r\n              initialState={1}\r\n            />\r\n          </h2>\r\n          <ul className=\"quotes__list\">\r\n            {taskBQuotes.map((quote, index) => (\r\n              <li className=\"quotes__item\">\r\n                <p>\r\n                  {index + 1}. {quote}\r\n                </p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nclass ComponentToPrint extends React.Component {\r\n  render() {\r\n    const taskATheme = this.props.taskATheme;\r\n    const taskBTheme = this.props.taskBTheme;\r\n    const taskAQuotes = this.props.taskAQuotes;\r\n    const taskBQuotes = this.props.taskBQuotes;\r\n\r\n    return (\r\n      <div className=\"print\">\r\n        <div className=\"quotes\">\r\n          <h2 className=\"quotes__title\">\r\n            <HiddenButton\r\n              titleLabel=\"Task A\"\r\n              visibleLabel={taskATheme}\r\n              hiddenLabel=\"\"\r\n              initialState={1}\r\n            />\r\n          </h2>\r\n          <ul className=\"quotes__list\">\r\n            {taskAQuotes.map((quote, index) => (\r\n              <li className=\"quotes__item\">\r\n                <p>\r\n                  {index + 1}. {quote}\r\n                </p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <h2 className=\"quotes__title\">\r\n            <HiddenButton\r\n              titleLabel=\"Task B\"\r\n              visibleLabel={taskBTheme}\r\n              hiddenLabel=\"\"\r\n              initialState={1}\r\n            />\r\n          </h2>\r\n          <ul className=\"quotes__list\">\r\n            {taskBQuotes.map((quote, index) => (\r\n              <li className=\"quotes__item\">\r\n                <p>\r\n                  {index + 1}. {quote}\r\n                </p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const taskATheme = getTaskATheme(state);\r\n  const taskBTheme = getTaskBTheme(state);\r\n  const taskAQuotes = getTaskAQuotes(state);\r\n  const taskBQuotes = getTaskBQuotes(state);\r\n  return { taskATheme, taskBTheme, taskAQuotes, taskBQuotes };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getQuotes: (taskATheme, taskBTheme) =>\r\n      dispatch(getQuotesAction(taskATheme, taskBTheme)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(QuotePage);\r\n","import React from 'react';\nimport { Router, Route } from 'react-router-dom';\nimport history from '../../history';\nimport Header from '../../Components/Header/Header'\nimport Footer from '../../Components/Footer/Footer'\nimport LandingPage from '../LandingPage/LandingPage'\nimport QuotePage from '../QuotePage/QuotePage'\n\nfunction App() {\n    return (\n        <Router history={ history }>\n            <Header />\n            <div>\n                <Route path=\"/\" exact component={ LandingPage } />\n                <Route path=\"/quote\" component={ QuotePage } />\n            </div>\n            <Footer />\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  GET_QUOTES_REQUEST,\r\n  GET_QUOTES_SUCCESS,\r\n  GET_QUOTES_FAILURE,\r\n  GET_THEMES_REQUEST,\r\n  GET_THEMES_SUCCESS,\r\n  GET_THEMES_FAILURE,\r\n} from \"../../Redux/actions\";\r\n\r\nconst initialState = {\r\n  quotes: false,\r\n  themes: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    // QUOTES\r\n    case GET_QUOTES_REQUEST: {\r\n      return {\r\n        ...state,\r\n        quotes: true,\r\n      };\r\n    }\r\n    case GET_QUOTES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        quotes: false,\r\n      };\r\n    }\r\n    case GET_QUOTES_FAILURE: {\r\n      return {\r\n        ...state,\r\n        quotes: false,\r\n      };\r\n    }\r\n\r\n    // THEMES\r\n    case GET_THEMES_REQUEST: {\r\n      return {\r\n        ...state,\r\n        themes: true,\r\n      };\r\n    }\r\n    case GET_THEMES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        themes: false,\r\n      };\r\n    }\r\n    case GET_THEMES_FAILURE: {\r\n      return {\r\n        ...state,\r\n        themes: false,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  GET_QUOTES_SUCCESS,\r\n  GET_THEMES_REQUEST,\r\n  GET_THEMES_SUCCESS,\r\n  SELECT_TASK_A_THEME,\r\n  SELECT_TASK_B_THEME,\r\n  GET_GAMSAT_THEMES_SUCCESS,\r\n} from \"../../Redux/actions\";\r\n\r\nconst initialState = {\r\n  // Active Quotes and Themes\r\n  task_a_theme: null,\r\n  task_a_quotes: [],\r\n  task_b_theme: null,\r\n  task_b_quotes: [],\r\n\r\n  // Listing Themes\r\n  task_a_themes: [],\r\n  task_b_themes: [],\r\n\r\n  // Listing Gamsat Themes\r\n  gamsat_themes: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_QUOTES_SUCCESS: {\r\n      const response = action.response;\r\n      return {\r\n        ...state,\r\n        task_a_theme: response.task_a_quotes[0].themes[0].theme,\r\n        task_a_quotes: response.task_a_quotes.map((quote) => quote.text),\r\n        task_b_theme: response.task_b_quotes[0].themes[0].theme,\r\n        task_b_quotes: response.task_b_quotes.map((quote) => quote.text),\r\n      };\r\n    }\r\n    case GET_THEMES_REQUEST: {\r\n      return {\r\n        ...state,\r\n        task_a_theme: null,\r\n        task_b_theme: null,\r\n      };\r\n    }\r\n    case GET_THEMES_SUCCESS: {\r\n      const response = action.response;\r\n      return {\r\n        ...state,\r\n        task_a_themes: response.task_a_themes,\r\n        task_b_themes: response.task_b_themes,\r\n      };\r\n    }\r\n    case SELECT_TASK_A_THEME: {\r\n      const theme = action.theme;\r\n      return {\r\n        ...state,\r\n        task_a_theme: theme,\r\n      };\r\n    }\r\n    case SELECT_TASK_B_THEME: {\r\n      const theme = action.theme;\r\n      return {\r\n        ...state,\r\n        task_b_theme: theme,\r\n      };\r\n    }\r\n    case GET_GAMSAT_THEMES_SUCCESS: {\r\n      const response = action.response;\r\n      return {\r\n        ...state,\r\n        gamsat_themes: response,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport isLoading from \"./isLoading\";\r\nimport quotes from \"./quotes\";\r\n\r\nexport default combineReducers({ isLoading, quotes });\r\n","import { applyMiddleware, createStore, compose } from \"redux\";\r\nimport rootReducer from \"./Reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\nconst composedEnhancers = composeWithDevTools( middlewareEnhancer )\r\n\r\nexport default createStore(rootReducer, composedEnhancers);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./Pages/App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}